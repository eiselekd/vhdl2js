/* entity iu3 */

function _t_entity_iu3(_p, _n, _g, _port) {
    hdl.obj(this, _p, _n);
    /* generic */
    this._gen = {
        decls: [{
            type: 'Generic',
            name: "nwin",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "2"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "32"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "8"
            }
        }, {
            type: 'Generic',
            name: "isets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "dsets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "fpu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "v8",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "63"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "cp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "mac",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "dsu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "nwp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pclow",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "notag",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "index",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "lddel",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "irfwt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "disas",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "tbuf",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "64"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pwd",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "svt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "rstaddr",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "smp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "fabtech",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'const',
                        value: "ntech"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "clk2x",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "bp",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }]
    };
    /* port */
    this._prt = {
        decls: [{
            type: 'Generic',
            name: "nwin",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "2"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "32"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "8"
            }
        }, {
            type: 'Generic',
            name: "isets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "dsets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "fpu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "v8",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "63"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "cp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "mac",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "dsu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "nwp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pclow",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "notag",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "index",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "lddel",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "irfwt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "disas",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "tbuf",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "64"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pwd",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "svt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "rstaddr",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "smp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "fabtech",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'const',
                        value: "ntech"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "clk2x",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "bp",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }]
    };

    this.elaborate = function() {}
}

/* architecture rtl of iu3 */

function _t_arch_iu3(_p, _n, _g, _port) {
    hdl.obj(this, _p, _n);
    /* generic */
    this._gen = {
        decls: [{
            type: 'Generic',
            name: "nwin",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "2"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "32"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "8"
            }
        }, {
            type: 'Generic',
            name: "isets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "dsets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "fpu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "v8",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "63"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "cp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "mac",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "dsu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "nwp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pclow",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "notag",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "index",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "lddel",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "irfwt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "disas",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "tbuf",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "64"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pwd",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "svt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "rstaddr",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "smp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "fabtech",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'const',
                        value: "ntech"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "clk2x",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "bp",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }]
    };
    /* port */
    this._prt = {
        decls: [{
            type: 'Generic',
            name: "nwin",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "2"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "32"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "8"
            }
        }, {
            type: 'Generic',
            name: "isets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "dsets",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }, {
            type: 'Generic',
            name: "fpu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "v8",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "63"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "cp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "mac",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "dsu",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "nwp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "4"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pclow",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "notag",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "index",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "lddel",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "1"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "2"
            }
        }, {
            type: 'Generic',
            name: "irfwt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "disas",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "tbuf",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "64"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "pwd",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "2"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "svt",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "rstaddr",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "smp",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "15"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "fabtech",
            mode: "in ",
            typedef: {
                type: 'IntegerSubtype',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'const',
                        value: "ntech"
                    }
                }
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "clk2x",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "0"
            }
        }, {
            type: 'Generic',
            name: "bp",
            mode: "in ",
            typedef: {
                type: 'Integer'
            },
            init: {
                type: 'IntLiteral',
                value: "1"
            }
        }]
    };

    /* types */
    this._typ = {
        decls: [{
            type: 'TypeConstrainedArray',
            name: "word",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "31"
                },
                right: {
                    type: 'IntLiteral',
                    value: "0"
                }
            },
            typmark: "std_logic_vector"
        }, {
            type: 'TypeConstrainedArray',
            name: "pctype",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "31"
                },
                right: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "pclow"
                }
            },
            typmark: "std_logic_vector"
        }, {
            type: 'TypeConstrainedArray',
            name: "rfatype",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rfbits"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                },
                right: {
                    type: 'IntLiteral',
                    value: "0"
                }
            },
            typmark: "std_logic_vector"
        }, {
            type: 'TypeConstrainedArray',
            name: "cwptype",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nwinlog2"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                },
                right: {
                    type: 'IntLiteral',
                    value: "0"
                }
            },
            typmark: "std_logic_vector"
        }, {
            type: 'TypeArray',
            name: "<icdtype>",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "isets"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            }
        }, {
            type: 'TypeConstrainedArray',
            name: "icdtype",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "isets"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            typmark: "<icdtype>"
        }, {
            type: 'TypeArray',
            name: "<dcdtype>",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dsets"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            }
        }, {
            type: 'TypeConstrainedArray',
            name: "dcdtype",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'BinaryExpression',
                    operator: "-",
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dsets"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "1"
                    }
                }
            },
            typmark: "<dcdtype>"
        }, {
            type: 'TypeRecord',
            name: "dc_in_type",
            entries: [{
                type: 'RecordEntry',
                tag: "signed",
                typedef: {
                    type: 'TypeRef',
                    typedef: "signed"
                }
            }, {
                type: 'RecordEntry',
                tag: "enaddr",
                typedef: {
                    type: 'TypeRef',
                    typedef: "enaddr"
                }
            }, {
                type: 'RecordEntry',
                tag: "read",
                typedef: {
                    type: 'TypeRef',
                    typedef: "read"
                }
            }, {
                type: 'RecordEntry',
                tag: "write",
                typedef: {
                    type: 'TypeRef',
                    typedef: "write"
                }
            }, {
                type: 'RecordEntry',
                tag: "lock",
                typedef: {
                    type: 'TypeRef',
                    typedef: "lock"
                }
            }, {
                type: 'RecordEntry',
                tag: "dsuen",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dsuen"
                }
            }, {
                type: 'RecordEntry',
                tag: "size",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "size",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "asi",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "asi",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "pipeline_ctrl_type",
            entries: [{
                type: 'RecordEntry',
                tag: "pc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pc"
                }
            }, {
                type: 'RecordEntry',
                tag: "inst",
                typedef: {
                    type: 'TypeRef',
                    typedef: "inst"
                }
            }, {
                type: 'RecordEntry',
                tag: "cnt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "cnt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "rd",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rd"
                }
            }, {
                type: 'RecordEntry',
                tag: "tt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "tt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "5"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "trap",
                typedef: {
                    type: 'TypeRef',
                    typedef: "trap"
                }
            }, {
                type: 'RecordEntry',
                tag: "annul",
                typedef: {
                    type: 'TypeRef',
                    typedef: "annul"
                }
            }, {
                type: 'RecordEntry',
                tag: "wreg",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wreg"
                }
            }, {
                type: 'RecordEntry',
                tag: "wicc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wicc"
                }
            }, {
                type: 'RecordEntry',
                tag: "wy",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wy"
                }
            }, {
                type: 'RecordEntry',
                tag: "ld",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ld"
                }
            }, {
                type: 'RecordEntry',
                tag: "pv",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pv"
                }
            }, {
                type: 'RecordEntry',
                tag: "rett",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rett"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "fetch_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "pc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pc"
                }
            }, {
                type: 'RecordEntry',
                tag: "branch",
                typedef: {
                    type: 'TypeRef',
                    typedef: "branch"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "decode_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "pc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pc"
                }
            }, {
                type: 'RecordEntry',
                tag: "inst",
                typedef: {
                    type: 'TypeRef',
                    typedef: "inst"
                }
            }, {
                type: 'RecordEntry',
                tag: "cwp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "cwp"
                }
            }, {
                type: 'RecordEntry',
                tag: "set",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "set",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "isetmsb"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "mexc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mexc"
                }
            }, {
                type: 'RecordEntry',
                tag: "cnt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "cnt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "pv",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pv"
                }
            }, {
                type: 'RecordEntry',
                tag: "annul",
                typedef: {
                    type: 'TypeRef',
                    typedef: "annul"
                }
            }, {
                type: 'RecordEntry',
                tag: "inull",
                typedef: {
                    type: 'TypeRef',
                    typedef: "inull"
                }
            }, {
                type: 'RecordEntry',
                tag: "step",
                typedef: {
                    type: 'TypeRef',
                    typedef: "step"
                }
            }, {
                type: 'RecordEntry',
                tag: "divrdy",
                typedef: {
                    type: 'TypeRef',
                    typedef: "divrdy"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "regacc_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "ctrl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ctrl"
                }
            }, {
                type: 'RecordEntry',
                tag: "rs1",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rs1",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "rfa1",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rfa1"
                }
            }, {
                type: 'RecordEntry',
                tag: "rfa2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rfa2"
                }
            }, {
                type: 'RecordEntry',
                tag: "rsel1",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rsel1",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "rsel2",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rsel2",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "rfe1",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rfe1"
                }
            }, {
                type: 'RecordEntry',
                tag: "rfe2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rfe2"
                }
            }, {
                type: 'RecordEntry',
                tag: "cwp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "cwp"
                }
            }, {
                type: 'RecordEntry',
                tag: "imm",
                typedef: {
                    type: 'TypeRef',
                    typedef: "imm"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldcheck1",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldcheck1"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldcheck2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldcheck2"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldchkra",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldchkra"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldchkex",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldchkex"
                }
            }, {
                type: 'RecordEntry',
                tag: "su",
                typedef: {
                    type: 'TypeRef',
                    typedef: "su"
                }
            }, {
                type: 'RecordEntry',
                tag: "et",
                typedef: {
                    type: 'TypeRef',
                    typedef: "et"
                }
            }, {
                type: 'RecordEntry',
                tag: "wovf",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wovf"
                }
            }, {
                type: 'RecordEntry',
                tag: "wunf",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wunf"
                }
            }, {
                type: 'RecordEntry',
                tag: "ticc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ticc"
                }
            }, {
                type: 'RecordEntry',
                tag: "jmpl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "jmpl"
                }
            }, {
                type: 'RecordEntry',
                tag: "step",
                typedef: {
                    type: 'TypeRef',
                    typedef: "step"
                }
            }, {
                type: 'RecordEntry',
                tag: "mulstart",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mulstart"
                }
            }, {
                type: 'RecordEntry',
                tag: "divstart",
                typedef: {
                    type: 'TypeRef',
                    typedef: "divstart"
                }
            }, {
                type: 'RecordEntry',
                tag: "bp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "bp"
                }
            }, {
                type: 'RecordEntry',
                tag: "nobp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "nobp"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "execute_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "ctrl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ctrl"
                }
            }, {
                type: 'RecordEntry',
                tag: "op1",
                typedef: {
                    type: 'TypeRef',
                    typedef: "op1"
                }
            }, {
                type: 'RecordEntry',
                tag: "op2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "op2"
                }
            }, {
                type: 'RecordEntry',
                tag: "aluop",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "aluop",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "alusel",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "alusel",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "aluadd",
                typedef: {
                    type: 'TypeRef',
                    typedef: "aluadd"
                }
            }, {
                type: 'RecordEntry',
                tag: "alucin",
                typedef: {
                    type: 'TypeRef',
                    typedef: "alucin"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldbp1",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldbp1"
                }
            }, {
                type: 'RecordEntry',
                tag: "ldbp2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ldbp2"
                }
            }, {
                type: 'RecordEntry',
                tag: "invop2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "invop2"
                }
            }, {
                type: 'RecordEntry',
                tag: "shcnt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "shcnt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "sari",
                typedef: {
                    type: 'TypeRef',
                    typedef: "sari"
                }
            }, {
                type: 'RecordEntry',
                tag: "shleft",
                typedef: {
                    type: 'TypeRef',
                    typedef: "shleft"
                }
            }, {
                type: 'RecordEntry',
                tag: "ymsb",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ymsb"
                }
            }, {
                type: 'RecordEntry',
                tag: "rd",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rd",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "jmpl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "jmpl"
                }
            }, {
                type: 'RecordEntry',
                tag: "su",
                typedef: {
                    type: 'TypeRef',
                    typedef: "su"
                }
            }, {
                type: 'RecordEntry',
                tag: "et",
                typedef: {
                    type: 'TypeRef',
                    typedef: "et"
                }
            }, {
                type: 'RecordEntry',
                tag: "cwp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "cwp"
                }
            }, {
                type: 'RecordEntry',
                tag: "icc",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "icc",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "mulstep",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mulstep"
                }
            }, {
                type: 'RecordEntry',
                tag: "mul",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mul"
                }
            }, {
                type: 'RecordEntry',
                tag: "mac",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mac"
                }
            }, {
                type: 'RecordEntry',
                tag: "bp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "bp"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "memory_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "ctrl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ctrl"
                }
            }, {
                type: 'RecordEntry',
                tag: "result",
                typedef: {
                    type: 'TypeRef',
                    typedef: "result"
                }
            }, {
                type: 'RecordEntry',
                tag: "y",
                typedef: {
                    type: 'TypeRef',
                    typedef: "y"
                }
            }, {
                type: 'RecordEntry',
                tag: "icc",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "icc",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "nalign",
                typedef: {
                    type: 'TypeRef',
                    typedef: "nalign"
                }
            }, {
                type: 'RecordEntry',
                tag: "dci",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dci"
                }
            }, {
                type: 'RecordEntry',
                tag: "werr",
                typedef: {
                    type: 'TypeRef',
                    typedef: "werr"
                }
            }, {
                type: 'RecordEntry',
                tag: "wcwp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wcwp"
                }
            }, {
                type: 'RecordEntry',
                tag: "irqen",
                typedef: {
                    type: 'TypeRef',
                    typedef: "irqen"
                }
            }, {
                type: 'RecordEntry',
                tag: "irqen2",
                typedef: {
                    type: 'TypeRef',
                    typedef: "irqen2"
                }
            }, {
                type: 'RecordEntry',
                tag: "mac",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mac"
                }
            }, {
                type: 'RecordEntry',
                tag: "divz",
                typedef: {
                    type: 'TypeRef',
                    typedef: "divz"
                }
            }, {
                type: 'RecordEntry',
                tag: "su",
                typedef: {
                    type: 'TypeRef',
                    typedef: "su"
                }
            }, {
                type: 'RecordEntry',
                tag: "mul",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mul"
                }
            }, {
                type: 'RecordEntry',
                tag: "casa",
                typedef: {
                    type: 'TypeRef',
                    typedef: "casa"
                }
            }, {
                type: 'RecordEntry',
                tag: "casaz",
                typedef: {
                    type: 'TypeRef',
                    typedef: "casaz"
                }
            }]
        }, {
            type: 'TypeEnum',
            name: "exception_state",
            values: ["run", "trap", "dsu1", "dsu2"]
        }, {
            type: 'TypeRecord',
            name: "exception_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "ctrl",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ctrl"
                }
            }, {
                type: 'RecordEntry',
                tag: "result",
                typedef: {
                    type: 'TypeRef',
                    typedef: "result"
                }
            }, {
                type: 'RecordEntry',
                tag: "y",
                typedef: {
                    type: 'TypeRef',
                    typedef: "y"
                }
            }, {
                type: 'RecordEntry',
                tag: "icc",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "icc",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "annul_all",
                typedef: {
                    type: 'TypeRef',
                    typedef: "annul_all"
                }
            }, {
                type: 'RecordEntry',
                tag: "data",
                typedef: {
                    type: 'TypeRef',
                    typedef: "data"
                }
            }, {
                type: 'RecordEntry',
                tag: "set",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "set",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsetmsb"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "mexc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mexc"
                }
            }, {
                type: 'RecordEntry',
                tag: "dci",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dci"
                }
            }, {
                type: 'RecordEntry',
                tag: "laddr",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "laddr",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "rstate",
                typedef: {
                    type: 'TypeRef',
                    typedef: "rstate"
                }
            }, {
                type: 'RecordEntry',
                tag: "npc",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "npc",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "intack",
                typedef: {
                    type: 'TypeRef',
                    typedef: "intack"
                }
            }, {
                type: 'RecordEntry',
                tag: "ipend",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ipend"
                }
            }, {
                type: 'RecordEntry',
                tag: "mac",
                typedef: {
                    type: 'TypeRef',
                    typedef: "mac"
                }
            }, {
                type: 'RecordEntry',
                tag: "debug",
                typedef: {
                    type: 'TypeRef',
                    typedef: "debug"
                }
            }, {
                type: 'RecordEntry',
                tag: "nerror",
                typedef: {
                    type: 'TypeRef',
                    typedef: "nerror"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "dsu_registers",
            entries: [{
                type: 'RecordEntry',
                tag: "tt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "tt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "err",
                typedef: {
                    type: 'TypeRef',
                    typedef: "err"
                }
            }, {
                type: 'RecordEntry',
                tag: "tbufcnt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "tbufcnt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tbufbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "asi",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "asi",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "crdy",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "crdy",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "irestart_register",
            entries: [{
                type: 'RecordEntry',
                tag: "addr",
                typedef: {
                    type: 'TypeRef',
                    typedef: "addr"
                }
            }, {
                type: 'RecordEntry',
                tag: "pwd",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pwd"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "pwd_register_type",
            entries: [{
                type: 'RecordEntry',
                tag: "pwd",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pwd"
                }
            }, {
                type: 'RecordEntry',
                tag: "error",
                typedef: {
                    type: 'TypeRef',
                    typedef: "error"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "special_register_type",
            entries: [{
                type: 'RecordEntry',
                tag: "cwp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "cwp"
                }
            }, {
                type: 'RecordEntry',
                tag: "icc",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "icc",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "tt",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "tt",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "tba",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "tba",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "19"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "wim",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "wim",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwin"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "pil",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "pil",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "ec",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ec"
                }
            }, {
                type: 'RecordEntry',
                tag: "ef",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ef"
                }
            }, {
                type: 'RecordEntry',
                tag: "ps",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ps"
                }
            }, {
                type: 'RecordEntry',
                tag: "s",
                typedef: {
                    type: 'TypeRef',
                    typedef: "s"
                }
            }, {
                type: 'RecordEntry',
                tag: "et",
                typedef: {
                    type: 'TypeRef',
                    typedef: "et"
                }
            }, {
                type: 'RecordEntry',
                tag: "y",
                typedef: {
                    type: 'TypeRef',
                    typedef: "y"
                }
            }, {
                type: 'RecordEntry',
                tag: "asr18",
                typedef: {
                    type: 'TypeRef',
                    typedef: "asr18"
                }
            }, {
                type: 'RecordEntry',
                tag: "svt",
                typedef: {
                    type: 'TypeRef',
                    typedef: "svt"
                }
            }, {
                type: 'RecordEntry',
                tag: "dwt",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dwt"
                }
            }, {
                type: 'RecordEntry',
                tag: "dbp",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dbp"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "write_reg_type",
            entries: [{
                type: 'RecordEntry',
                tag: "s",
                typedef: {
                    type: 'TypeRef',
                    typedef: "s"
                }
            }, {
                type: 'RecordEntry',
                tag: "result",
                typedef: {
                    type: 'TypeRef',
                    typedef: "result"
                }
            }, {
                type: 'RecordEntry',
                tag: "wa",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wa"
                }
            }, {
                type: 'RecordEntry',
                tag: "wreg",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wreg"
                }
            }, {
                type: 'RecordEntry',
                tag: "except",
                typedef: {
                    type: 'TypeRef',
                    typedef: "except"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "registers",
            entries: [{
                type: 'RecordEntry',
                tag: "f",
                typedef: {
                    type: 'TypeRef',
                    typedef: "f"
                }
            }, {
                type: 'RecordEntry',
                tag: "d",
                typedef: {
                    type: 'TypeRef',
                    typedef: "d"
                }
            }, {
                type: 'RecordEntry',
                tag: "a",
                typedef: {
                    type: 'TypeRef',
                    typedef: "a"
                }
            }, {
                type: 'RecordEntry',
                tag: "e",
                typedef: {
                    type: 'TypeRef',
                    typedef: "e"
                }
            }, {
                type: 'RecordEntry',
                tag: "m",
                typedef: {
                    type: 'TypeRef',
                    typedef: "m"
                }
            }, {
                type: 'RecordEntry',
                tag: "x",
                typedef: {
                    type: 'TypeRef',
                    typedef: "x"
                }
            }, {
                type: 'RecordEntry',
                tag: "w",
                typedef: {
                    type: 'TypeRef',
                    typedef: "w"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "exception_type",
            entries: [{
                type: 'RecordEntry',
                tag: "pri",
                typedef: {
                    type: 'TypeRef',
                    typedef: "pri"
                }
            }, {
                type: 'RecordEntry',
                tag: "ill",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ill"
                }
            }, {
                type: 'RecordEntry',
                tag: "fpdis",
                typedef: {
                    type: 'TypeRef',
                    typedef: "fpdis"
                }
            }, {
                type: 'RecordEntry',
                tag: "cpdis",
                typedef: {
                    type: 'TypeRef',
                    typedef: "cpdis"
                }
            }, {
                type: 'RecordEntry',
                tag: "wovf",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wovf"
                }
            }, {
                type: 'RecordEntry',
                tag: "wunf",
                typedef: {
                    type: 'TypeRef',
                    typedef: "wunf"
                }
            }, {
                type: 'RecordEntry',
                tag: "ticc",
                typedef: {
                    type: 'TypeRef',
                    typedef: "ticc"
                }
            }]
        }, {
            type: 'TypeRecord',
            name: "watchpoint_register",
            entries: [{
                type: 'RecordEntry',
                tag: "addr",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "addr",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "2"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "mask",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "mask",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "2"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'RecordEntry',
                tag: "exec",
                typedef: {
                    type: 'TypeRef',
                    typedef: "exec"
                }
            }, {
                type: 'RecordEntry',
                tag: "load",
                typedef: {
                    type: 'TypeRef',
                    typedef: "load"
                }
            }, {
                type: 'RecordEntry',
                tag: "store",
                typedef: {
                    type: 'TypeRef',
                    typedef: "store"
                }
            }]
        }, {
            type: 'TypeArray',
            name: "<watchpoint_registers>",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'IntLiteral',
                    value: "3"
                }
            }
        }, {
            type: 'TypeConstrainedArray',
            name: "watchpoint_registers",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'IntLiteral',
                    value: "3"
                }
            },
            typmark: "<watchpoint_registers>"
        }]
    };
    /* subs */
    this._sub = {
        decls: [{
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<icdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "isets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<dcdtype>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pipeline_ctrl_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "5"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "trap",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "trap"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wicc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wicc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wy"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ld",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ld"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rett",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rett"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pipeline_ctrl_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "5"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "trap",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "trap"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wicc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wicc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wy"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ld",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ld"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rett",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rett"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pipeline_ctrl_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "5"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "trap",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "trap"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wicc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wicc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wy"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ld",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ld"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rett",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rett"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pipeline_ctrl_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "5"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "trap",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "trap"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wicc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wicc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wy"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ld",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ld"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rett",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rett"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "fetch_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "branch",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "branch"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "fetch_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "branch",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "branch"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "fetch_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "branch",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "branch"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "fetch_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "branch",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "branch"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "decode_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "isetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inull",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inull"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divrdy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divrdy"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "decode_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "isetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inull",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inull"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divrdy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divrdy"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "decode_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "isetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inull",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inull"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divrdy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divrdy"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "decode_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inst",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inst"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "isetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "cnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pv",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pv"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "inull",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "inull"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divrdy",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divrdy"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "regacc_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rs1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rs1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel2",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel2",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "imm",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "imm"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkra",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkra"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkex",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkex"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nobp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nobp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "regacc_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rs1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rs1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel2",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel2",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "imm",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "imm"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkra",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkra"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkex",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkex"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nobp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nobp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "regacc_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rs1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rs1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel2",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel2",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "imm",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "imm"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkra",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkra"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkex",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkex"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nobp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nobp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "regacc_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rs1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rs1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfa2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfa2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel1",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel1",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rsel2",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rsel2",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rfe2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rfe2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "imm",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "imm"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldcheck2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldcheck2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkra",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkra"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldchkex",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldchkex"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "step",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "step"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divstart",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divstart"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nobp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nobp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "execute_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluop",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "aluop",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alusel",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "alusel",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluadd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "aluadd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alucin",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "alucin"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "invop2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "invop2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "shcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "sari",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "sari"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shleft",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "shleft"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ymsb",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ymsb"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rd",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstep",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstep"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "execute_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluop",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "aluop",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alusel",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "alusel",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluadd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "aluadd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alucin",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "alucin"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "invop2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "invop2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "shcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "sari",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "sari"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shleft",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "shleft"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ymsb",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ymsb"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rd",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstep",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstep"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "execute_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluop",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "aluop",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alusel",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "alusel",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluadd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "aluadd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alucin",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "alucin"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "invop2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "invop2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "shcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "sari",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "sari"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shleft",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "shleft"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ymsb",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ymsb"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rd",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstep",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstep"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "execute_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "op2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "op2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluop",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "aluop",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alusel",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "alusel",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "aluadd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "aluadd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "alucin",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "alucin"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp1",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp1"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ldbp2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ldbp2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "invop2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "invop2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "shcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "sari",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "sari"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "shleft",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "shleft"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ymsb",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ymsb"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rd",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "rd",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "jmpl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "jmpl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mulstep",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mulstep"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "bp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "bp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "memory_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nalign",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nalign"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "werr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "werr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wcwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wcwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divz"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casaz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casaz"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "memory_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nalign",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nalign"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "werr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "werr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wcwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wcwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divz"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casaz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casaz"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "memory_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nalign",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nalign"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "werr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "werr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wcwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wcwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divz"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casaz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casaz"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "memory_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nalign",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nalign"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "werr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "werr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wcwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wcwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "irqen2",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "irqen2"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "divz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "divz"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "su",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "su"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mul",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mul"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "casaz",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "casaz"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: ">",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: ">=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "<",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "<=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "exception_state",
                    values: ["run", "trap", "dsu1", "dsu2"]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul_all",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul_all"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "data",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "data"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "laddr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "laddr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rstate",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rstate"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "npc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "npc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "intack",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "intack"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ipend",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ipend"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "debug",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "debug"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nerror",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nerror"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul_all",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul_all"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "data",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "data"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "laddr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "laddr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rstate",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rstate"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "npc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "npc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "intack",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "intack"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ipend",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ipend"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "debug",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "debug"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nerror",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nerror"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul_all",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul_all"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "data",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "data"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "laddr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "laddr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rstate",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rstate"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "npc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "npc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "intack",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "intack"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ipend",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ipend"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "debug",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "debug"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nerror",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nerror"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "ctrl",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ctrl"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "annul_all",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "annul_all"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "data",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "data"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "set",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "set",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsetmsb"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mexc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mexc"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dci",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dci"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "laddr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "laddr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "rstate",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "rstate"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "npc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "npc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "intack",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "intack"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ipend",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ipend"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mac",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "mac"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "debug",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "debug"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "nerror",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "nerror"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pwd_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "error",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "error"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pwd_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "error",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "error"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pwd_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "error",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "error"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pwd_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "error",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "error"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "write_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "except",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "except"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "write_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "except",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "except"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "write_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "except",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "except"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "write_reg_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "result",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "result"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wa",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wa"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wreg",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wreg"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "except",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "except"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pri",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pri"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ill",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ill"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "fpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "fpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pri",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pri"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ill",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ill"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "fpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "fpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pri",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pri"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ill",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ill"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "fpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "fpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "exception_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pri",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pri"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ill",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ill"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "fpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "fpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "cpdis",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cpdis"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wovf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wovf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wunf",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "wunf"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ticc",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ticc"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "/=",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeArray',
                    name: "<watchpoint_registers>",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    }
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "&",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "<anonymous>",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "watchpoint_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "addr",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "mask",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "mask",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "exec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "exec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "load",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "load"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "store",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "store"
                        }
                    }]
                }
            }],
            decl: [],
            seq: []
        }, {
            type: 'Subprog',
            name: "dbgexc",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "trap",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tt",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "dmode"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dmode"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'UnaryExpression',
                                operator: "not"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "tt"
                                                    },
                                                    right: {
                                                        type: 'SimpleAggregate',
                                                        entries: []
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "bwatch"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "bsoft"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "tt"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "10000001"
                                                    }
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "btrapa"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "btrape"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dbgi"
                                            },
                                            element: "berror"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dmode"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "dmode"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "dbgerr",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "tt",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "err"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "err"
                    },
                    right: {
                        type: 'UnaryExpression',
                        operator: "not"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "dbreak"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tt"
                                },
                                right: {
                                    type: 'SimpleAggregate',
                                    entries: []
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "bsoft"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tt"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "10000001"
                                }
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "err"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "err"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "diagwr",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dsur",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "ir",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dbg",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "s",
                mode: "out ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "vwpr",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "asi",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "7"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "pc",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "pctype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "pclow"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "npc",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "pctype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "pclow"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "tbufcnt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tbufbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "wr",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "addr",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "9"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "data",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "fpcwr",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "i"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "s"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "w"
                        },
                        element: "s"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "f"
                        },
                        element: "pc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "npc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ir"
                        },
                        element: "addr"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wr"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vwpr"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wpr"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "asi"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dsur"
                        },
                        element: "asi"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "addr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "data"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbg"
                        },
                        element: "ddata"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tbufcnt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dsur"
                        },
                        element: "tbufcnt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpcwr"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbg"
                                    },
                                    element: "dsuen"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbg"
                                    },
                                    element: "denable"
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbg"
                                },
                                element: "dwrite"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbg"
                                    },
                                    element: "daddr"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "23"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "20"
                                    }
                                }
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "0001"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbg"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "16"
                                                    }]
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "tracebuf"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "tbufcnt"
                                                },
                                                right: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbg"
                                                        },
                                                        element: "ddata"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "-",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tbufbits"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "1"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }
                                                    }
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "0011"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbg"
                                                    },
                                                    element: "daddr"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "12"
                                                }]
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wr"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "addr"
                                                },
                                                right: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "addr"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "-",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "rfbits"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "1"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbg"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "+",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "rfbits"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "1"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "2"
                                                        }
                                                    }
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "fpcwr"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "0100"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbg"
                                                },
                                                element: "daddr"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "7"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "6"
                                                }
                                            }
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "00"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'SwitchStatement',
                                                    discriminant: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbg"
                                                            },
                                                            element: "daddr"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "5"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }
                                                        }
                                                    },
                                                    cases: [{
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0000"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "y"
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "dbg"
                                                                    },
                                                                    element: "ddata"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0001"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "cwp"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "-",
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "nwinlog2"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "1"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "icc"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "23"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "20"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "ec"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "13"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fpen"
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "s"
                                                                            },
                                                                            element: "ef"
                                                                        },
                                                                        right: {
                                                                            type: 'IndexExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "dbg"
                                                                                },
                                                                                element: "ddata"
                                                                            },
                                                                            indexes: [{
                                                                                type: 'IntLiteral',
                                                                                value: "12"
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "pil"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "11"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "8"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "7"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "ps"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "6"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "et"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "5"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0010"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "wim"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "-",
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "nwin"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "1"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0011"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "tba"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "12"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "tt"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "11"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "4"
                                                                        }
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0100"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "pc"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "pclow"
                                                                        }
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0101"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "npc"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "pclow"
                                                                        }
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0110"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fpcwr"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0111"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: []
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1001"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "asi"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "7"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'Others'
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: []
                                                        }
                                                    }]
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "01"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'SwitchStatement',
                                                    discriminant: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbg"
                                                            },
                                                            element: "daddr"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "5"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }
                                                        }
                                                    },
                                                    cases: [{
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0001"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "bp"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "s"
                                                                            },
                                                                            element: "dbp"
                                                                        },
                                                                        right: {
                                                                            type: 'IndexExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "dbg"
                                                                                },
                                                                                element: "ddata"
                                                                            },
                                                                            indexes: [{
                                                                                type: 'IntLiteral',
                                                                                value: "27"
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "dwt"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "14"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "s"
                                                                    },
                                                                    element: "svt"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "13"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "0010"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "macen"
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "s"
                                                                            },
                                                                            element: "asr18"
                                                                        },
                                                                        right: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "dbg"
                                                                            },
                                                                            element: "ddata"
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1000"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }]
                                                                    },
                                                                    element: "addr"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }]
                                                                    },
                                                                    element: "exec"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1001"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }]
                                                                    },
                                                                    element: "mask"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }]
                                                                    },
                                                                    element: "load"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }]
                                                                    },
                                                                    element: "store"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1010"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    },
                                                                    element: "addr"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    },
                                                                    element: "exec"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1011"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    },
                                                                    element: "mask"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    },
                                                                    element: "load"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    },
                                                                    element: "store"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1100"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }]
                                                                    },
                                                                    element: "addr"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }]
                                                                    },
                                                                    element: "exec"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1101"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }]
                                                                    },
                                                                    element: "mask"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }]
                                                                    },
                                                                    element: "load"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }]
                                                                    },
                                                                    element: "store"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1110"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "3"
                                                                        }]
                                                                    },
                                                                    element: "addr"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "3"
                                                                        }]
                                                                    },
                                                                    element: "exec"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "1111"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "3"
                                                                        }]
                                                                    },
                                                                    element: "mask"
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "3"
                                                                        }]
                                                                    },
                                                                    element: "load"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "vwpr"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "3"
                                                                        }]
                                                                    },
                                                                    element: "store"
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbg"
                                                                        },
                                                                        element: "ddata"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'Others'
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: []
                                                        }
                                                    }]
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "asr17_gen",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "asr17"
            }, {
                type: 'Var',
                name: "fpu2"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "asr17"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "zero32"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "asr17"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "28"
                            }
                        }
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "index"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'IntLiteral',
                                value: "4"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "bp"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "2"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "27"
                                }]
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "dbp"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "notag"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "26"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: ">",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "clk2x"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "8"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "16"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "15"
                                    }
                                }
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "clk2x"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "8"
                                        }
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'IntLiteral',
                                        value: "2"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "17"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: ">",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "clk2x"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "asr17"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "16"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "15"
                                        }
                                    }
                                },
                                right: {
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "clk2x"
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }]
                                }
                            }]
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "asr17"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "14"
                        }]
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "w"
                            },
                            element: "s"
                        },
                        element: "dwt"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "svt"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "13"
                                }]
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "svt"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "lddel"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "2"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "12"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: ">",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpu"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "<",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpu"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "8"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpu2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: ">=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fpu"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "8"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "<",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fpu"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "15"
                                }
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fpu2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "3"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fpu"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "15"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpu2"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "2"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpu2"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }]
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "asr17"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "11"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "10"
                            }
                        }
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpu2"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "mac"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "9"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "/=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "v8"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "asr17"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "8"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "asr17"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "7"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "5"
                            }
                        }
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwp"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'IntLiteral',
                                value: "3"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "asr17"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "4"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "nwin"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'IntLiteral',
                                value: "5"
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "asr17"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "diagread",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dsur",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "ir",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "dco",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "dcache_out_type"
                }
            }, {
                type: 'Arg',
                name: "tbufo",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "tracebuf_out_type"
                }
            }, {
                type: 'Arg',
                name: "data",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "cwp"
            }, {
                type: 'Var',
                name: "rd"
            }, {
                type: 'Var',
                name: "i"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "data"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cwp"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "cwp"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "nwinlog2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "w"
                            },
                            element: "s"
                        },
                        element: "cwp"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "dbgi"
                            },
                            element: "daddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "22"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "20"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tracebuf"
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "daddr"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "16"
                                                }]
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "tracebuf"
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "-",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tbufbits"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dsur"
                                                            },
                                                            element: "tbufcnt"
                                                        }
                                                    }]
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'SwitchStatement',
                                                discriminant: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "3"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "2"
                                                        }
                                                    }
                                                },
                                                cases: [{
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "00"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "data"
                                                            },
                                                            right: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "tbufo"
                                                                    },
                                                                    element: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "127"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "96"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "01"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "data"
                                                            },
                                                            right: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "tbufo"
                                                                    },
                                                                    element: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "95"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "64"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "10"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "data"
                                                            },
                                                            right: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "tbufo"
                                                                    },
                                                                    element: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "63"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "32"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'Others'
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "data"
                                                            },
                                                            right: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "tbufo"
                                                                    },
                                                                    element: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "31"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dbgi"
                                            },
                                            element: "daddr"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "12"
                                        }]
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "data"
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "rfo"
                                                },
                                                element: "data1"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "11"
                                                    }]
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'const',
                                                        value: "is_fpga"
                                                    },
                                                    indexes: [{
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fabtech"
                                                    }]
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "data"
                                                },
                                                right: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rfo"
                                                        },
                                                        element: "data2"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }
                                                    }
                                                }
                                            }]
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "data"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "fpo"
                                                },
                                                element: "dbg"
                                            },
                                            element: "data"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dbgi"
                                        },
                                        element: "daddr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "7"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "6"
                                        }
                                    }
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "00"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'SwitchStatement',
                                            discriminant: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "daddr"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "5"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "2"
                                                    }
                                                }
                                            },
                                            cases: [{
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0000"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "data"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "y"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0001"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "data"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "&",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "&",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "&",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "&",
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "&",
                                                                            left: {
                                                                                type: 'BinaryExpression',
                                                                                operator: "&",
                                                                                left: {
                                                                                    type: 'BinaryExpression',
                                                                                    operator: "&",
                                                                                    left: {
                                                                                        type: 'BinaryExpression',
                                                                                        operator: "&",
                                                                                        left: {
                                                                                            type: 'BinaryExpression',
                                                                                            operator: "&",
                                                                                            left: {
                                                                                                type: 'BinaryExpression',
                                                                                                operator: "&",
                                                                                                left: {
                                                                                                    type: 'FunccallExpression',
                                                                                                    arguments: [{
                                                                                                        type: 'Association',
                                                                                                        value: {
                                                                                                            type: 'Identifier',
                                                                                                            phase: 'const',
                                                                                                            value: "impl"
                                                                                                        }
                                                                                                    }, {
                                                                                                        type: 'Association',
                                                                                                        value: {
                                                                                                            type: 'IntLiteral',
                                                                                                            value: "4"
                                                                                                        }
                                                                                                    }]
                                                                                                },
                                                                                                right: {
                                                                                                    type: 'FunccallExpression',
                                                                                                    arguments: [{
                                                                                                        type: 'Association',
                                                                                                        value: {
                                                                                                            type: 'Identifier',
                                                                                                            phase: 'const',
                                                                                                            value: "ver"
                                                                                                        }
                                                                                                    }, {
                                                                                                        type: 'Association',
                                                                                                        value: {
                                                                                                            type: 'IntLiteral',
                                                                                                            value: "4"
                                                                                                        }
                                                                                                    }]
                                                                                                }
                                                                                            },
                                                                                            right: {
                                                                                                type: 'MemberExpression',
                                                                                                object: {
                                                                                                    type: 'MemberExpression',
                                                                                                    object: {
                                                                                                        type: 'MemberExpression',
                                                                                                        object: {
                                                                                                            type: 'Identifier',
                                                                                                            phase: 'sig',
                                                                                                            value: "r"
                                                                                                        },
                                                                                                        element: "w"
                                                                                                    },
                                                                                                    element: "s"
                                                                                                },
                                                                                                element: "icc"
                                                                                            }
                                                                                        },
                                                                                        right: {
                                                                                            type: 'StringLiteral',
                                                                                            value: "000000"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'MemberExpression',
                                                                                            object: {
                                                                                                type: 'MemberExpression',
                                                                                                object: {
                                                                                                    type: 'Identifier',
                                                                                                    phase: 'sig',
                                                                                                    value: "r"
                                                                                                },
                                                                                                element: "w"
                                                                                            },
                                                                                            element: "s"
                                                                                        },
                                                                                        element: "ec"
                                                                                    }
                                                                                },
                                                                                right: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'MemberExpression',
                                                                                            object: {
                                                                                                type: 'Identifier',
                                                                                                phase: 'sig',
                                                                                                value: "r"
                                                                                            },
                                                                                            element: "w"
                                                                                        },
                                                                                        element: "s"
                                                                                    },
                                                                                    element: "ef"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "w"
                                                                                    },
                                                                                    element: "s"
                                                                                },
                                                                                element: "pil"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "r"
                                                                                    },
                                                                                    element: "w"
                                                                                },
                                                                                element: "s"
                                                                            },
                                                                            element: "s"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "r"
                                                                                },
                                                                                element: "w"
                                                                            },
                                                                            element: "s"
                                                                        },
                                                                        element: "ps"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "w"
                                                                        },
                                                                        element: "s"
                                                                    },
                                                                    element: "et"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cwp"
                                                            }
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0010"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "-",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nwin"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "wim"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0011"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "data"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "&",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "&",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "w"
                                                                        },
                                                                        element: "s"
                                                                    },
                                                                    element: "tba"
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "w"
                                                                        },
                                                                        element: "s"
                                                                    },
                                                                    element: "tt"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "0000"
                                                            }
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0100"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "31"
                                                                },
                                                                right: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "pclow"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "f"
                                                            },
                                                            element: "pc"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0101"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "31"
                                                                },
                                                                right: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "pclow"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "ir"
                                                            },
                                                            element: "addr"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0110"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "data"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "fpo"
                                                                },
                                                                element: "dbg"
                                                            },
                                                            element: "data"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "0111"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: []
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "1000"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "12"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "4"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "&",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dsur"
                                                                },
                                                                element: "err"
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dsur"
                                                                },
                                                                element: "tt"
                                                            }
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "1001"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "data"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "7"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dsur"
                                                            },
                                                            element: "asi"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'Others'
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: []
                                                }
                                            }]
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "01"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "5"
                                                    }]
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dbgi"
                                                                },
                                                                element: "daddr"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "4"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "001"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "data"
                                                            },
                                                            right: {
                                                                type: 'FunccallExpression',
                                                                arguments: [{
                                                                    type: 'Association',
                                                                    value: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "r"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "macen"
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "dbgi"
                                                                        },
                                                                        element: "daddr"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "4"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "010"
                                                                }
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "data"
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "w"
                                                                        },
                                                                        element: "s"
                                                                    },
                                                                    element: "asr18"
                                                                }
                                                            }]
                                                        }
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "i"
                                                    },
                                                    right: {
                                                        type: 'FunccallExpression',
                                                        arguments: [{
                                                            type: 'Association',
                                                            value: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "dbgi"
                                                                    },
                                                                    element: "daddr"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "4"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dbgi"
                                                                },
                                                                element: "daddr"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }]
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "31"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "wpr"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "i"
                                                                    }]
                                                                },
                                                                element: "addr"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "wpr"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "i"
                                                                    }]
                                                                },
                                                                element: "exec"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "data"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "31"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "wpr"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "i"
                                                                    }]
                                                                },
                                                                element: "mask"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "1"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "wpr"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "i"
                                                                    }]
                                                                },
                                                                element: "load"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "wpr"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "i"
                                                                    }]
                                                                },
                                                                element: "store"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "111"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "data"
                                },
                                right: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "data"
                                    },
                                    indexes: [{
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "set"
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }]
            }]
        }, {
            type: 'Subprog',
            name: "itrace",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dsur",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "vdsu",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "res",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "exc",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "error",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "trap",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tbufcnt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tbufbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "di",
                mode: "out ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "tracebuf_in_type"
                }
            }],
            decl: [{
                type: 'Var',
                name: "meminst"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "di"
                        },
                        element: "addr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "di"
                        },
                        element: "data"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "di"
                        },
                        element: "enable"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "di"
                        },
                        element: "write"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tbufcnt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "vdsu"
                        },
                        element: "tbufcnt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "meminst"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "31"
                            }]
                        },
                        right: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "30"
                            }]
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tracebuf"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "addr"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "tbufbits"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dsur"
                                },
                                element: "tbufcnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "127"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "126"
                                }]
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "125"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "96"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "timer"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "29"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "95"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "64"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "res"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "34"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "2"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "33"
                                }]
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "32"
                                }]
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "error"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "di"
                                    },
                                    element: "data"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dbgi"
                                        },
                                        element: "tenable"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "rstate"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dsu2"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "dsuen"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "denable"
                                                }
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "&",
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "23"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "20"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "daddr"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "16"
                                                    }]
                                                }
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00010"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "di"
                                                },
                                                element: "enable"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "di"
                                                    },
                                                    element: "addr"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "-",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "tbufbits"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "daddr"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "+",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "-",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tbufbits"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "1"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "4"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "4"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "dwrite"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'SwitchStatement',
                                                    discriminant: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbgi"
                                                            },
                                                            element: "daddr"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "3"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }
                                                        }
                                                    },
                                                    cases: [{
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "di"
                                                                        },
                                                                        element: "write"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "01"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "di"
                                                                        },
                                                                        element: "write"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "10"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "di"
                                                                        },
                                                                        element: "write"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'Others'
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "di"
                                                                        },
                                                                        element: "write"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "di"
                                                        },
                                                        element: "data"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "&",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "&",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "dbgi"
                                                                    },
                                                                    element: "ddata"
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "dbgi"
                                                                    },
                                                                    element: "ddata"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dbgi"
                                                                },
                                                                element: "ddata"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbgi"
                                                            },
                                                            element: "ddata"
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "pv"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "meminst"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "di"
                                            },
                                            element: "enable"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "di"
                                            },
                                            element: "write"
                                        },
                                        right: {
                                            type: 'Aggregate',
                                            entries: [{
                                                type: 'AggregateEntry',
                                                tags: [{
                                                    type: 'Others'
                                                }],
                                                value: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "tbufcnt"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "+",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dsur"
                                                },
                                                element: "tbufcnt"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "1"
                                            }
                                        }
                                    }]
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "di"
                                },
                                element: "diag"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "testen"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "000"
                                }
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "scanen"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "di"
                                        },
                                        element: "enable"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "dbg_cache",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "holdn",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dsur",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "mresult",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "dci",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "mresult2",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "dci2",
                mode: "out ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mresult2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mresult"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dci2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dci"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci2"
                        },
                        element: "dsuen"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "rstate"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsu2"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dci2"
                                        },
                                        element: "asi"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dsur"
                                        },
                                        element: "asi"
                                    }
                                }, {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "daddr"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "22"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "20"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "111"
                                            }
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "dsuen"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci2"
                                                },
                                                element: "dsuen"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "denable"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "m"
                                                            },
                                                            element: "dci"
                                                        },
                                                        element: "dsuen"
                                                    }
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci2"
                                                },
                                                element: "enaddr"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "denable"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci2"
                                                },
                                                element: "size"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci2"
                                                },
                                                element: "read"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci2"
                                                },
                                                element: "write"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "denable"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "mresult2"
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "mresult2"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "19"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbgi"
                                                            },
                                                            element: "daddr"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "19"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "2"
                                                            }
                                                        }
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "mresult2"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "ddata"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "dwrite"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci2"
                                                        },
                                                        element: "read"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci2"
                                                        },
                                                        element: "write"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "fpexack",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "fpexc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpexc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpen"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "tt"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tt_fpexc"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpexc"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "diagrdy",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "denable",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "dsur",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dsu_registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "err",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "err"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tbufcnt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tbufcnt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbufbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "crdy",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "crdy",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dci",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "mds",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ico",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "icache_out_type"
                }
            }, {
                type: 'Arg',
                name: "crdy",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "crdy"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "&",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dsur"
                                },
                                element: "crdy"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "1"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "dci"
                            },
                            element: "dsuen"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dsur"
                                    },
                                    element: "asi"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01100"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01101"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01001"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "crdy"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "2"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "ico"
                                                },
                                                element: "diagrdy"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "11110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01011"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "crdy"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "1"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "enaddr"
                                                }
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "crdy"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "2"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dci"
                                                },
                                                element: "enaddr"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "denable"
                                            }
                                        }
                                    }]
                                }
                            }]
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "regaddr",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "cwp",
                mode: "in ",
                typedef: {
                    type: 'TypeArray'
                }
            }, {
                type: 'Arg',
                name: "reg",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rao",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rfatype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rfbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "ra"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ra"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "ra"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "4"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "reg"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "reg"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "4"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "3"
                                }
                            }
                        },
                        right: {
                            type: 'StringLiteral',
                            value: "00"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "ra"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rfbits"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "globals"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "ra"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "+",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "nwinlog2"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "3"
                                        }
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "+",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "cwp"
                                },
                                right: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "ra"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "4"
                                    }]
                                }
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "ra"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "-",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "rfbits"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "1"
                                            }
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "4"
                                        }
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "globals"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "ra"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "-",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "rfbits"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "4"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rao"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ra"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "branch_address",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "pc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "pctype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "pclow"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "baddr"
            }, {
                type: 'Var',
                name: "caddr"
            }, {
                type: 'Var',
                name: "tmp"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "caddr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "caddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "29"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "caddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "+",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "caddr"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        },
                        right: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "pc"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "baddr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "baddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "24"
                            }
                        }
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "21"
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "baddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "23"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "21"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "baddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "+",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "baddr"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        },
                        right: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "pc"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "inst"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "30"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tmp"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "caddr"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tmp"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "baddr"
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "tmp"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "branch_true",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "icc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "n"
            }, {
                type: 'Var',
                name: "z"
            }, {
                type: 'Var',
                name: "v"
            }, {
                type: 'Var',
                name: "c"
            }, {
                type: 'Var',
                name: "branch"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "n"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "3"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "z"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "2"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "v"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "1"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "c"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "0"
                        }]
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "27"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "z"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "z"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "xor",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "n"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "v"
                                            }
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "xor",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "n"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "v"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "c"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "z"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "c"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "110"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "n"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "branch"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "28"
                                        }]
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "v"
                                    }
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "branch"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "su_et_select",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "xc_ps",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "xc_s",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "xc_et",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "su",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "et",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "rett"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "rett"
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rett"
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "rett"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "annul_all"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "su"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_ps"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "et"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "su"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_s"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "et"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_et"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "wphit",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "debug",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }],
            decl: [{
                type: 'Var',
                name: "exc"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "exc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'LoopStatement',
                    param: {
                        type: 'LoopParam',
                        name: "i",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "1"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwp"
                            }
                        }
                    },
                    block: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "wpr"
                                                },
                                                indexes: [{
                                                    type: 'BinaryExpression',
                                                    operator: "-",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "i"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "1"
                                                    }
                                                }]
                                            },
                                            element: "exec"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "pv"
                                        }
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "xor",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "wpr"
                                                        },
                                                        indexes: [{
                                                            type: 'BinaryExpression',
                                                            operator: "-",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "i"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "1"
                                                            }
                                                        }]
                                                    },
                                                    element: "addr"
                                                },
                                                right: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "a"
                                                            },
                                                            element: "ctrl"
                                                        },
                                                        element: "pc"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "2"
                                                        }
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "wpr"
                                                    },
                                                    indexes: [{
                                                        type: 'BinaryExpression',
                                                        operator: "-",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "i"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    }]
                                                },
                                                element: "mask"
                                            }
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'const',
                                                value: "zero32"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "2"
                                                }
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "exc"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "debug"
                                        },
                                        element: "dsuen"
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "exc"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "exc"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "a"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "pv"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "debug"
                                                        },
                                                        element: "dbreak"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "debug"
                                                        },
                                                        element: "bwatch"
                                                    }
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "a"
                                                    },
                                                    element: "step"
                                                }
                                            }
                                        }
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "exc"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "shift3",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "aluin1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluin2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "shiftin"
            }, {
                type: 'Var',
                name: "shiftout"
            }, {
                type: 'Var',
                name: "cnt"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cnt"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "shcnt"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "e"
                            },
                            element: "shleft"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "30"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                },
                                right: {
                                    type: 'TypeConversion',
                                    typedef: {
                                        type: 'TypeArray'
                                    },
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    }
                                }
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "sari"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'TypeConversion',
                                typedef: {
                                    type: 'TypeArray'
                                },
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluin1"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "shiftout"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "shiftin"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cnt"
                            }
                        }]
                    }
                }, {
                    type: 'TypeConversion',
                    typedef: {
                        type: 'TypeArray'
                    },
                    value: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "shiftout"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "shift2",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "aluin1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluin2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "ushiftin"
            }, {
                type: 'Var',
                name: "sshiftin"
            }, {
                type: 'Var',
                name: "cnt"
            }, {
                type: 'Var',
                name: "resleft"
            }, {
                type: 'Var',
                name: "resright"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cnt"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "shcnt"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ushiftin"
                    },
                    right: {
                        type: 'TypeConversion',
                        typedef: {
                            type: 'TypeArray'
                        },
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "aluin1"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "sshiftin"
                    },
                    right: {
                        type: 'TypeConversion',
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        },
                        value: {
                            type: 'BinaryExpression',
                            operator: "&",
                            left: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "aluin1"
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "e"
                            },
                            element: "shleft"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "resleft"
                            },
                            right: {
                                type: 'TypeConversion',
                                typedef: {
                                    type: 'TypeArray'
                                },
                                value: {
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ushiftin"
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "cnt"
                                        }
                                    }]
                                }
                            }
                        }, {
                            type: 'Identifier',
                            phase: 'name',
                            value: "resleft"
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "sari"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "sshiftin"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "32"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "aluin1"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "sshiftin"
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "sshiftin"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "cnt"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "resright"
                            },
                            right: {
                                type: 'TypeConversion',
                                typedef: {
                                    type: 'TypeArray'
                                },
                                value: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "sshiftin"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                }
                            }
                        }, {
                            type: 'Identifier',
                            phase: 'name',
                            value: "resright"
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "shift",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "aluin1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluin2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "shiftcnt",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "sari",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "shiftin"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "shiftin"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "&",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "zero32"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "aluin1"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "e"
                            },
                            element: "shleft"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "zero32"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluin1"
                                }
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "sari"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "shiftcnt"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "4"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "47"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "16"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "shiftcnt"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "3"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "39"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "47"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "8"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "shiftcnt"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "2"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "35"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "39"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "shiftcnt"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "1"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "33"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "35"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "2"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "shiftcnt"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "0"
                            }]
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "shiftin"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'SliceExpression',
                    object: {
                        type: 'Identifier',
                        phase: 'var',
                        value: "shiftin"
                    },
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "exception_detect",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "dbgi",
                mode: "in ",
                typedef: {
                    type: 'TypeRef',
                    typedef: "l3_debug_in_type"
                }
            }, {
                type: 'Arg',
                name: "trap",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "5"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "illegal_inst"
            }, {
                type: 'Var',
                name: "privileged_inst"
            }, {
                type: 'Var',
                name: "cp_disabled"
            }, {
                type: 'Var',
                name: "fp_disabled"
            }, {
                type: 'Var',
                name: "fpop"
            }, {
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "rd"
            }, {
                type: 'Var',
                name: "inst"
            }, {
                type: 'Var',
                name: "wph"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "inst"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "inst"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trap"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "trap"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "tt"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "30"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op2"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "24"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "22"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op3"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "24"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "19"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rd"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "29"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "25"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "illegal_inst"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "privileged_inst"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cp_disabled"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fp_disabled"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpop"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "00"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op2"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpen"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "w"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                element: "ec"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "10"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "000001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "101000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "100000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "notag"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "a"
                                                        },
                                                        element: "et"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "101001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "101011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "101010"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110101"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpen"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fpop"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fpop"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "w"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                element: "ec"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "000011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rd"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "000000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "000110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "010011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "inst"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "13"
                                                            }]
                                                        },
                                                        right: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "rd"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }]
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "010000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "inst"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "13"
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111100"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "casaen"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "inst"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "13"
                                                                }]
                                                            }
                                                        }, {
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "inst"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "12"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "5"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'BitStringLiteral',
                                                                    value: "00001010"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "privileged_inst"
                                                                    },
                                                                    right: {
                                                                        type: 'UnaryExpression',
                                                                        operator: "not"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "illegal_inst"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "100011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100101"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpen"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "100110"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "w"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                element: "ef"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110110"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "privileged_inst"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "w"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                element: "ec"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110001"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110101"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "w"
                                                                    },
                                                                    element: "s"
                                                                },
                                                                element: "ec"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cp_disabled"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "illegal_inst"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "wph"
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "r"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "wpr"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dbgi"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "trap"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "000001"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "privileged_inst"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "tt"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "000011"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "illegal_inst"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "tt"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "000010"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "fp_disabled"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "tt"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "000100"
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "cp_disabled"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "tt"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "100100"
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "wph"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "tt"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "001011"
                                                        }
                                                    }]
                                                },
                                                alternate: {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "a"
                                                            },
                                                            element: "wovf"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "000101"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "a"
                                                                },
                                                                element: "wunf"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "tt"
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "000110"
                                                                }
                                                            }]
                                                        },
                                                        alternate: {
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "a"
                                                                    },
                                                                    element: "ticc"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "111111"
                                                                    }
                                                                }]
                                                            },
                                                            alternate: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'0'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'Aggregate',
                                                                        entries: [{
                                                                            type: 'AggregateEntry',
                                                                            tags: [{
                                                                                type: 'Others'
                                                                            }],
                                                                            value: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'0'"
                                                                            }
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "wicc_y_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "wicc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "wy",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wicc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wy"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "inst"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "30"
                                }
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "fmt3"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "24"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "19"
                                    }
                                }
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "010100"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100001"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100011"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010001"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010011"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010101"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011100"
                                }, {
                                    type: 'StringLiteral',
                                    value: "110001"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "wicc"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "110000"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "d"
                                                        },
                                                        element: "inst"
                                                    },
                                                    indexes: [{
                                                        type: 'FunccallExpression',
                                                        arguments: [{
                                                            type: 'Association',
                                                            value: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "d"
                                                                },
                                                                element: "set"
                                                            }
                                                        }]
                                                    }]
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "29"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "25"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00000"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wy"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "100100"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "wicc"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "wy"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "111110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "111111"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "macen"
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wy"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "011010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011011"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "nready"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "/=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "d"
                                                            },
                                                            element: "cnt"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "/=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "multype"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wicc"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wy"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "001010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "001011"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "nready"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "/=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "d"
                                                            },
                                                            element: "cnt"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "/=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "multype"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wy"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "011110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011111"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "diven"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "divo"
                                                        },
                                                        element: "nready"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "/=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "cnt"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "00"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "wicc"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "cwp_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "v",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "annul",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "wcwp",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ncwp",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "cwptype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwinlog2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "cwp",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "cwptype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwinlog2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "rstate"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "trap"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "rstate"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsu2"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rstn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cwp"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "cwp"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "wcwp"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "annul"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                }
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "cwp"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ncwp"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "wcwp"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "cwp"
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "result"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "-",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "nwinlog2"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "cwp"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "cwp"
                                    }
                                }]
                            }
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "cwp_ex",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wcwp",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "30"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fmt3"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "24"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "19"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "wrpsr"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "wcwp"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "wcwp"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "cwp_ctrl",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "xc_wim",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwin"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "de_cwp",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "cwptype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwinlog2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "wovf_exc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "wunf_exc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "wcwp",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "wim"
            }, {
                type: 'Var',
                name: "ncwp"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wovf_exc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wunf_exc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wim"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "wim"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "nwin"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_wim"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ncwp"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "cwp"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wcwp"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fmt3"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op3"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rett"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op3"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "restore"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "save"
                                }
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "wcwp"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "save"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "d"
                                                },
                                                element: "cwp"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cwpmin"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncwp"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cwpmax"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncwp"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "-",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "cwp"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            }
                                        }]
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "d"
                                                },
                                                element: "cwp"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cwpmax"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncwp"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cwpmin"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncwp"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "+",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "cwp"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "wim"
                                    },
                                    indexes: [{
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncwp"
                                            }
                                        }]
                                    }]
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "save"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "wovf_exc"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "wunf_exc"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_cwp"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ncwp"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "rs1_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rs1",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rs1mod",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rs1"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "18"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "14"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rs1mod"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "op"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ldst"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "cnt"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "01"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "op3"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "2"
                                                }]
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "cnt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "10"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rs1mod"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rs1"
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "29"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "25"
                                            }
                                        }
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "cnt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "10"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "op3"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "3"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "0111"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "rs1"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "icc_valid",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "not_valid"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "not_valid"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "mulen"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "diven"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "not_valid"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "wicc"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "m"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "cnt"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "mul"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "not_valid"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "not_valid"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "wicc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "wicc"
                            }
                        }
                    }
                }, {
                    type: 'UnaryExpression',
                    operator: "not"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "bp_miss_ex",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "icc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ex_bpmiss",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ra_bpannul",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "miss"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miss"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'UnaryExpression',
                                operator: "not"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "bp"
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ra_bpannul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "miss"
                        },
                        right: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "29"
                            }]
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_bpmiss"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miss"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "bp_miss_ra",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "ra_bpmiss",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_bpannul",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "miss"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miss"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "bp"
                                }
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "r"
                                    }
                                }]
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_bpannul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "miss"
                        },
                        right: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "29"
                            }]
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ra_bpmiss"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miss"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "lock_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "rs2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rd",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rfa1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rfatype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rfbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rfa2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rfatype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rfbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rfrd",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rfatype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rfbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "fpc_lock",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mulinsn",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "divinsn",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_wcwp",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "lldcheck1",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "lldcheck2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "lldlock",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "lldchkra",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "lldchkex",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "bp",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "nobp",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_fins_hold",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "cond"
            }, {
                type: 'Var',
                name: "rs1"
            }, {
                type: 'Var',
                name: "i"
            }, {
                type: 'Var',
                name: "ldcheck1"
            }, {
                type: 'Var',
                name: "ldcheck2"
            }, {
                type: 'Var',
                name: "ldchkra"
            }, {
                type: 'Var',
                name: "ldchkex"
            }, {
                type: 'Var',
                name: "ldcheck3"
            }, {
                type: 'Var',
                name: "ldlock"
            }, {
                type: 'Var',
                name: "icc_check"
            }, {
                type: 'Var',
                name: "bicc_hold"
            }, {
                type: 'Var',
                name: "chkmul"
            }, {
                type: 'Var',
                name: "y_check"
            }, {
                type: 'Var',
                name: "icc_check_bp"
            }, {
                type: 'Var',
                name: "y_hold"
            }, {
                type: 'Var',
                name: "mul_hold"
            }, {
                type: 'Var',
                name: "bicc_hold_bp"
            }, {
                type: 'Var',
                name: "fins"
            }, {
                type: 'Var',
                name: "call_hold"
            }, {
                type: 'Var',
                name: "lddlock"
            }, {
                type: 'Var',
                name: "de_fins_holdx"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cond"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "28"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rs1"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "18"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "14"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lddlock"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "false"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "i"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "13"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldcheck1"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldcheck2"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldcheck3"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldlock"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldchkra"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldchkex"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "icc_check"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bicc_hold"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "y_check"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "y_hold"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bp"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mul_hold"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "icc_check_bp"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nobp"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fins"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "call_hold"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "d"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "call_hold"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "nobp"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "bpred"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "00"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "op2"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "bicc"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "/=",
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "cond"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "2"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "000"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "icc_check_bp"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "op2"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "bicc"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "nobp"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "bpred"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "10"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldcheck1"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldcheck2"
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    }, {
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111010"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "/=",
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "cond"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "000"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "icc_check"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "nobp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "bpred"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "101000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck1"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "macpipe"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "y_check"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "101010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "101011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck1"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "101001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck1"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "icc_check"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011110"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "diven"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "y_check"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "nobp"
                                                            },
                                                            right: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "4"
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110101"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck1"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fins"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "bpred"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "call_hold"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "nobp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "bpred"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "11"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldcheck1"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldchkra"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }, {
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "cnt"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "00"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "lddel"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "5"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "ldcheck3"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldchkra"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "01"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldcheck2"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "and",
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "5"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }]
                                                                }
                                                            },
                                                            right: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "ldcheck1"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "ldcheck2"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldchkex"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "casaen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "5"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "111"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "ldcheck2"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "or",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "5"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "&",
                                                                    left: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "5"
                                                                        }]
                                                                    },
                                                                    right: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "3"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "1"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "0110"
                                                                }
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "ldcheck1"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "ldcheck2"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            }]
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "op3"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "2"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "011"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "lddlock"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "true"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "op3"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "5"
                                                }]
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "fins"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "bpred"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "mulen"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "diven"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "chkmul"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "mulinsn"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "mul_hold"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "mulstart"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "wicc"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "wicc"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "m"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "cnt"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "0"
                                            }]
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "mul"
                                        }
                                    }
                                }
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "multype"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "icc_check_bp"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "bpred"
                                                }
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "a"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "wicc"
                                            }
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "wy"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "mul_hold"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "chkmul"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "diven"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "y_hold"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "y_check"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "wy"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "wy"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "chkmul"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "chkmul"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "divinsn"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bicc_hold"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "icc_check"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bicc_hold_bp"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "icc_check_bp"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "ld"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "chkmul"
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "wreg"
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldchkra"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldcheck1"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "rd"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rfa1"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldcheck2"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "rd"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rfa2"
                                        }
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldcheck3"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rfrd"
                                    }
                                }
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldlock"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "ld"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "mac"
                                            }
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "wreg"
                                        }
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldchkex"
                                    }
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "lddel"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "macpipe"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "mac"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "multype"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "3"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "mul"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldcheck1"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rfa1"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldcheck2"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rfa2"
                                    }
                                }
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldlock"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_fins_holdx"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "bpred"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fins"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "bp"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "bp"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_fins_hold"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_fins_holdx"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldlock"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldlock"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "y_hold"
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fpc_lock"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "bpred"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "bp"
                                        }
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "29"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_wcwp"
                                }
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_fins_holdx"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "icc_check_bp"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "bpred"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "nobp"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "mul_hold"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "bp"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "bicc_hold_bp"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldlock"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ldlock"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "bicc_hold"
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "bicc_hold_bp"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lldcheck1"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldcheck1"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lldcheck2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldcheck2"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lldlock"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldlock"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lldchkra"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldchkra"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "lldchkex"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldchkex"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "fpbranch",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "fcc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "branch",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "cond"
            }, {
                type: 'Var',
                name: "fbres"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cond"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "28"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "cond"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "1"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "1"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "fcc"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "0"
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "fcc"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "1"
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "110"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "1"
                                        }]
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "fbres"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "1"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "fcc"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "branch"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "xor",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "cond"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "3"
                            }]
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "fbres"
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "ic_ctrl",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "annul_all",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ldlock",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "branch_true",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "fbranch_true",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "cbranch_true",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "fccv",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "cccv",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "cnt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "de_pc",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "pctype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "pclow"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "de_branch",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ctrl_annul",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_annul",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "jmpl_inst",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "inull",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_pv",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ctrl_pv",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "de_hold_pc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ticc_exception",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "rett_inst",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mulstart",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "divstart",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "rabpmiss",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "exbpmiss",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "cond"
            }, {
                type: 'Var',
                name: "hold_pc"
            }, {
                type: 'Var',
                name: "annul_current"
            }, {
                type: 'Var',
                name: "annul_next"
            }, {
                type: 'Var',
                name: "branch"
            }, {
                type: 'Var',
                name: "annul"
            }, {
                type: 'Var',
                name: "pv"
            }, {
                type: 'Var',
                name: "de_jmpl"
            }, {
                type: 'Var',
                name: "inhibit_current"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "branch"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul_next"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul_current"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pv"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "hold_pc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ticc_exception"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rett_inst"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cond"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "28"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "29"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_jmpl"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cnt"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "00"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mulstart"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "divstart"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "inhibit_current"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "d"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "30"
                                    }
                                }
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "branch"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "d"
                                                },
                                                element: "inull"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "hold_pc"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "annul_current"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "00"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op2"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "bicc"
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpen"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "op2"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "fbfcc"
                                                        }
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "cpen"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op2"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cbccc"
                                                    }
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpen"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "op2"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "fbfcc"
                                                        }
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "branch"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "fbranch_true"
                                                        }
                                                    }, {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "/=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fccv"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "hold_pc"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "annul_current"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                },
                                                alternate: {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "cpen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "op2"
                                                            },
                                                            right: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cbccc"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "branch"
                                                            },
                                                            right: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cbranch_true"
                                                            }
                                                        }, {
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "cccv"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "hold_pc"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "annul_current"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "branch"
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "or",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "branch_true"
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "and",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "and",
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "bpred"
                                                                        },
                                                                        right: {
                                                                            type: 'FunccallExpression',
                                                                            arguments: [{
                                                                                type: 'Association',
                                                                                value: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cond"
                                                                                }
                                                                            }]
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'UnaryExpression',
                                                                        operator: "not"
                                                                    }
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }
                                            }, {
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "hold_pc"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "branch"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "and",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "cond"
                                                                        },
                                                                        right: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "ba"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "annul"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "annul_next"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        },
                                                        alternate: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "annul_next"
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "or",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "annul_next"
                                                                    },
                                                                    right: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "annul"
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "d"
                                                                },
                                                                element: "inull"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "hold_pc"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "annul_current"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "annul_next"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "10"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "mulen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "/=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "multype"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "mulstart"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "mulen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "multype"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'SwitchStatement',
                                                            discriminant: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "d"
                                                                },
                                                                element: "cnt"
                                                            },
                                                            cases: [{
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'StringLiteral',
                                                                    value: "00"
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "cnt"
                                                                        },
                                                                        right: {
                                                                            type: 'StringLiteral',
                                                                            value: "01"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "hold_pc"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "pv"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'0'"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "mulstart"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'StringLiteral',
                                                                    value: "01"
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'IfStatement',
                                                                        test: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "=",
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "mulo"
                                                                                },
                                                                                element: "nready"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        },
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "00"
                                                                                }
                                                                            }]
                                                                        },
                                                                        alternate: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "01"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "pv"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'0'"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "hold_pc"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'Others'
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: []
                                                                }
                                                            }]
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "diven"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'SwitchStatement',
                                                            discriminant: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "d"
                                                                },
                                                                element: "cnt"
                                                            },
                                                            cases: [{
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'StringLiteral',
                                                                    value: "00"
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "hold_pc"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "pv"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'0'"
                                                                        }
                                                                    }, {
                                                                        type: 'IfStatement',
                                                                        test: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "=",
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "r"
                                                                                    },
                                                                                    element: "d"
                                                                                },
                                                                                element: "divrdy"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'0'"
                                                                            }
                                                                        },
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "01"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "divstart"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'StringLiteral',
                                                                    value: "01"
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'IfStatement',
                                                                        test: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "=",
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "divo"
                                                                                },
                                                                                element: "nready"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        },
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "00"
                                                                                }
                                                                            }]
                                                                        },
                                                                        alternate: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "01"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "pv"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'0'"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "hold_pc"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }, {
                                                                type: 'SwitchCase',
                                                                tests: [{
                                                                    type: 'Others'
                                                                }],
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: []
                                                                }
                                                            }]
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111010"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "branch_true"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "ticc_exception"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "rett_inst"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "de_jmpl"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110000"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "pwrd1"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "inst"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "29"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "25"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "10011"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'SwitchStatement',
                                                                    discriminant: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "d"
                                                                        },
                                                                        element: "cnt"
                                                                    },
                                                                    cases: [{
                                                                        type: 'SwitchCase',
                                                                        tests: [{
                                                                            type: 'StringLiteral',
                                                                            value: "00"
                                                                        }],
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "pv"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'0'"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "00"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "hold_pc"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }, {
                                                                                type: 'IfStatement',
                                                                                test: {
                                                                                    type: 'BinaryExpression',
                                                                                    operator: "=",
                                                                                    left: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'MemberExpression',
                                                                                            object: {
                                                                                                type: 'Identifier',
                                                                                                phase: 'sig',
                                                                                                value: "r"
                                                                                            },
                                                                                            element: "x"
                                                                                        },
                                                                                        element: "ipend"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'EnumLiteral',
                                                                                        value: "'1'"
                                                                                    }
                                                                                },
                                                                                consequence: {
                                                                                    type: 'BlockStatement',
                                                                                    body: [{
                                                                                        type: 'AssignmentExpressionVar',
                                                                                        left: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'name',
                                                                                            value: "cnt"
                                                                                        },
                                                                                        right: {
                                                                                            type: 'StringLiteral',
                                                                                            value: "01"
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        type: 'SwitchCase',
                                                                        tests: [{
                                                                            type: 'StringLiteral',
                                                                            value: "01"
                                                                        }],
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "cnt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "00"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }, {
                                                                        type: 'SwitchCase',
                                                                        tests: [{
                                                                            type: 'Others'
                                                                        }],
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: []
                                                                        }
                                                                    }]
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "cnt"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "00"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "11"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cnt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "01"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "hold_pc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "pv"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "01"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "or",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "or",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "2"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "0"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "111"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "3"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "0"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "1101"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "and",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "casaen"
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "5"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "4"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "11"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "or",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "cpen"
                                                                },
                                                                right: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fpen"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "&",
                                                                    left: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "5"
                                                                        }]
                                                                    },
                                                                    right: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "2"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "0"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "1110"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cnt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "10"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "pv"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "hold_pc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cnt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "00"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "10"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cnt"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "00"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ldlock"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "hold_pc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "hold_pc"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldlock"
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "exbpmiss"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "annul"
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "pv"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "exbpmiss"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pv"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_current"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "exbpmiss"
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "exbpmiss"
                                        },
                                        right: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "29"
                                            }]
                                        }
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "01"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_current"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "exbpmiss"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "29"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "annul"
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pv"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "inhibit_current"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rabpmiss"
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "pv"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rabpmiss"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "29"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pv"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "inhibit_current"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "hold_pc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_pc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pc"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_pc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "f"
                                },
                                element: "pc"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul_current"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_current"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldlock"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "annul_all"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ctrl_annul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "annul"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "annul_all"
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_current"
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "inhibit_current"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pv"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "pv"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "jmpl_inst"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_jmpl"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul_next"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "inull"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "annul_all"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul_next"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rstn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cnt"
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_hold_pc"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "hold_pc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_branch"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "branch"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_annul"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul_next"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_pv"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pv"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ctrl_pv"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "d"
                            },
                            element: "pv"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "inull"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "inull"
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "hold_pc"
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "annul_all"
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "rd_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "wreg",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ld",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "rdo",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "write_reg"
            }, {
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "rd"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "write_reg"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rd"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "29"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ld"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "01"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "write_reg"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rd"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "01111"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op2"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "sethi"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "write_reg"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "mulo"
                                                                    },
                                                                    element: "nready"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "d"
                                                                    },
                                                                    element: "cnt"
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "00"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "/=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "multype"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "write_reg"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "write_reg"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001111"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "diven"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "divo"
                                                                },
                                                                element: "nready"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "/=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "d"
                                                                },
                                                                element: "cnt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "00"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "write_reg"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "write_reg"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110101"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "write_reg"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ld"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "op3"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "2"
                                            }]
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "write_reg"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001111"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011111"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001101"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011101"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "cnt"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "00"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "write_reg"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ld"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "cnt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "01"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "000011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "010011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110011"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rd"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "0"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "rd"
                        },
                        right: {
                            type: 'StringLiteral',
                            value: "00000"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "write_reg"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wreg"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "write_reg"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rdo"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rd"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "imm_data",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "insn",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "immediate_data"
            }, {
                type: 'Var',
                name: "inst"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "immediate_data"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "inst"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "insn"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "immediate_data"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "inst"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "21"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "0000000000"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "immediate_data"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "13"
                                        }
                                    }
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "inst"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "12"
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "immediate_data"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "12"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "12"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "immediate_data"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "get_spr",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "spr"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "spr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "spr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "5"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "&",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "&",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "&",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "&",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "&",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "&",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "&",
                                                                    left: {
                                                                        type: 'FunccallExpression',
                                                                        arguments: [{
                                                                            type: 'Association',
                                                                            value: {
                                                                                type: 'Identifier',
                                                                                phase: 'const',
                                                                                value: "impl"
                                                                            }
                                                                        }, {
                                                                            type: 'Association',
                                                                            value: {
                                                                                type: 'IntLiteral',
                                                                                value: "4"
                                                                            }
                                                                        }]
                                                                    },
                                                                    right: {
                                                                        type: 'FunccallExpression',
                                                                        arguments: [{
                                                                            type: 'Association',
                                                                            value: {
                                                                                type: 'Identifier',
                                                                                phase: 'const',
                                                                                value: "ver"
                                                                            }
                                                                        }, {
                                                                            type: 'Association',
                                                                            value: {
                                                                                type: 'IntLiteral',
                                                                                value: "4"
                                                                            }
                                                                        }]
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "m"
                                                                    },
                                                                    element: "icc"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "000000"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "ec"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "ef"
                                                    }
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    },
                                                    element: "pil"
                                                }
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "su"
                                            }
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "w"
                                                },
                                                element: "s"
                                            },
                                            element: "ps"
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "et"
                                    }
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "spr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "-",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "nwinlog2"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "1"
                                            }
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "cwp"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "spr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "4"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tba"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tt"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "spr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "-",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "nwin"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "1"
                                            }
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "wim"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "spr"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "imm_select",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "inst",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "imm"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "imm"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "false"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "24"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "22"
                                        }
                                    }
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "imm"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "true"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "24"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "19"
                                        }
                                    }
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "101010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "101001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "101011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "imm"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "true"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "inst"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "13"
                                                    }]
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "imm"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "true"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "11"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "13"
                                        }]
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "imm"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "true"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "imm"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "alu_op",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "iop1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "iop2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "me_icc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "my",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ldbp",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "aop1",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aop2",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluop",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "alusel",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluadd",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "shcnt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "sari",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "shleft",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ymsb",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mulins",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "divins",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mulstep",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "macins",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ldbp2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "invop2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "rd"
            }, {
                type: 'Var',
                name: "icc"
            }, {
                type: 'Var',
                name: "y0"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aop1"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "iop1"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aop2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "iop2"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldbp2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldbp"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aluop"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "000"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "alusel"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "11"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aluadd"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "shcnt"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "iop2"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "4"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "sari"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "shleft"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "invop2"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ymsb"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "iop1"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "0"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mulins"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "divins"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mulstep"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "macins"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wy"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "y0"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "my"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "wy"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "y0"
                                },
                                right: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "y"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "0"
                                    }]
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "wy"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "y0"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "y"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "y0"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "w"
                                                },
                                                element: "s"
                                            },
                                            element: "y"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }]
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "icc"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_icc"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "wicc"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "icc"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "icc"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "wicc"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icc"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "icc"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icc"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "icc"
                                    }
                                }]
                            }
                        }
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "01"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluop"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "111"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op2"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "001"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111101"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111001"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluadd"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aop2"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "invop2"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aop1"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "&",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "xor",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "icc"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "3"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "icc"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }]
                                                    }
                                                },
                                                right: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "iop1"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "y0"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "aop2"
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldbp2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulstep"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "mulins"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "macen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "mulins"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "macins"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001111"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "diven"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "aluop"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "110"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "alusel"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "10"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "divins"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010001"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "000"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000101"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010101"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "100"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010010"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "010"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010110"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "101"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000111"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "011"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "010011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "000011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110000"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "001"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "101001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "101011"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "101010"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "110"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "101000"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "101"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100101"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "001"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "01"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "shleft"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "shcnt"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "invop2"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100110"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "010"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "01"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "100111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "100"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "01"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "sari"
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "iop1"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "110101"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "cnt"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "00"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "alusel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "01"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'SwitchStatement',
                                            discriminant: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "op3"
                                            },
                                            cases: [{
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "000011"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "010011"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "110011"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "alusel"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "100011"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "alusel"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "001111"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "011111"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "001101"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "011101"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "111100"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "alusel"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'StringLiteral',
                                                    value: "100100"
                                                }, {
                                                    type: 'StringLiteral',
                                                    value: "100111"
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: []
                                                }
                                            }, {
                                                type: 'SwitchCase',
                                                tests: [{
                                                    type: 'Others'
                                                }],
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "aluop"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "000"
                                                        }
                                                    }, {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "op3"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "1"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "0"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "01"
                                                                    }
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "aluop"
                                                                        },
                                                                        right: {
                                                                            type: 'StringLiteral',
                                                                            value: "010"
                                                                        }
                                                                    }]
                                                                },
                                                                alternate: {
                                                                    type: 'IfStatement',
                                                                    test: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'SliceExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'var',
                                                                                value: "op3"
                                                                            },
                                                                            range: {
                                                                                type: 'RangeExpression',
                                                                                left: {
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                },
                                                                                right: {
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'StringLiteral',
                                                                            value: "10"
                                                                        }
                                                                    },
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "aluop"
                                                                            },
                                                                            right: {
                                                                                type: 'StringLiteral',
                                                                                value: "011"
                                                                            }
                                                                        }]
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "10"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "aluop"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "000"
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "op3"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "2"
                                                    }]
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "and",
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'UnaryExpression',
                                                                    operator: "not"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "aluop"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "100"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "casaen"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "m"
                                                        },
                                                        element: "casa"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "alusel"
                                                    },
                                                    right: {
                                                        type: 'StringLiteral',
                                                        value: "00"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "aluadd"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "aop2"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "invop2"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }]
                }]
            }]
        }, {
            type: 'Subprog',
            name: "ra_inull_gen",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "v",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "de_inull"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_inull"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "v"
                                            },
                                            element: "e"
                                        },
                                        element: "jmpl"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "v"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rett"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inull"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "v"
                                            },
                                            element: "a"
                                        },
                                        element: "jmpl"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "v"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rett"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inull"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "de_inull"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "op_mux",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "rfd",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ed",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "md",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "xd",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "im",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "rsel",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ldbp",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "d",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "id",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ldbp"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rsel"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfd"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ed"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "md"
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "lddel"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldbp"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "m"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "ld"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xd"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "im"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "110"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "result"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "d"
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'-'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casaen"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "cnt"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "10"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "casa"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldbp"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "op_find",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "ldchkra",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ldchkex",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "rs1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "4"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ra",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "rfatype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rfbits"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "im",
                mode: "in ",
                typedef: {
                    type: 'Integer'
                }
            }, {
                type: 'Arg',
                name: "rfe",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "osel",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "2"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ldcheck",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rfe"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "im"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "osel"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "100"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rs1"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "00000"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "osel"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "101"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "wreg"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldchkra"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ra"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "osel"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "001"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "wreg"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ldchkex"
                                            }
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ra"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "rd"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "osel"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "010"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "m"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "wreg"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ra"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "m"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "rd"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "osel"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "011"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "irfwt"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "ctrl"
                                                        },
                                                        element: "wreg"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "ra"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "rd"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "osel"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "110"
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "osel"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "000"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "rfe"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "ldcheck"
                                                }
                                            }]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "cin_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "me_cin",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "cin",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "ncin"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ncin"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_cin"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ncin"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "icc"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "0"
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cin"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "000100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "010100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100001"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "100011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cin"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001000"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011000"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cin"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ncin"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001100"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "cin"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "11"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "casaen"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "m"
                                                },
                                                element: "casa"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "a"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "cnt"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "cin"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }]
            }]
        }, {
            type: 'Subprog',
            name: "logic_op",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "aluin1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluin2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "mey",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ymsb",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "logicres",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "y",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "logicout"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "aluop"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin2"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin2"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin2"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "xor",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluin1"
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "110"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "diven"
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "logicout"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "aluin2"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "logicout"
                                        },
                                        right: {
                                            type: 'Aggregate',
                                            entries: [{
                                                type: 'AggregateEntry',
                                                tags: [{
                                                    type: 'Others'
                                                }],
                                                value: {
                                                    type: 'EnumLiteral',
                                                    value: "'-'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'-'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "wy"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "mulstep"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "y"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ymsb"
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "y"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    }
                                }
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "wy"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "y"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "wy"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "y"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "mey"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "macpipe"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "mac"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "y"
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "mulo"
                                                },
                                                element: "result"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "63"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "32"
                                                }
                                            }
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "wy"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "y"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "y"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "y"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "w"
                                                    },
                                                    element: "s"
                                                },
                                                element: "y"
                                            }
                                        }]
                                    }
                                }
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "logicres"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "logicout"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "misc_op",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "aluin1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "aluin2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "ldata",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "mey",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "mout",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "edata",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "miscout"
            }, {
                type: 'Var',
                name: "bpdata"
            }, {
                type: 'Var',
                name: "stdata"
            }, {
                type: 'Var',
                name: "wpi"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wpi"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "0"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miscout"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "&",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "pc"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        },
                        right: {
                            type: 'StringLiteral',
                            value: "00"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "edata"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aluin1"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bpdata"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aluin1"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "wreg"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "ld"
                                            }
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "rd"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "30"
                                        }
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldst"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "/=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "10"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "bpdata"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ldata"
                            }
                        }]
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "aluop"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "&",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "&",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "bpdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "bpdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "bpdata"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "7"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "bpdata"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "7"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "edata"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "bpdata"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "15"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "bpdata"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "15"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "edata"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "bpdata"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "edata"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluin2"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "100"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "edata"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "101"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "mulen"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "m"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "wy"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "miscout"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "mey"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "miscout"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "y"
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: ">",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "nwp"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "18"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "17"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "11"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "wpi"
                                        },
                                        right: {
                                            type: 'FunccallExpression',
                                            arguments: [{
                                                type: 'Association',
                                                value: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "e"
                                                            },
                                                            element: "ctrl"
                                                        },
                                                        element: "inst"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "16"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "15"
                                                        }
                                                    }
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "e"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "inst"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "14"
                                                }]
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "miscout"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "&",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "wpr"
                                                                },
                                                                indexes: [{
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "wpi"
                                                                }]
                                                            },
                                                            element: "addr"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "wpr"
                                                            },
                                                            indexes: [{
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "wpi"
                                                            }]
                                                        },
                                                        element: "exec"
                                                    }
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "miscout"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "&",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "wpr"
                                                                },
                                                                indexes: [{
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "wpi"
                                                                }]
                                                            },
                                                            element: "mask"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "wpr"
                                                                },
                                                                indexes: [{
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "wpi"
                                                                }]
                                                            },
                                                            element: "load"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "wpr"
                                                            },
                                                            indexes: [{
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "wpi"
                                                            }]
                                                        },
                                                        element: "store"
                                                    }
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "18"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "17"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "14"
                                            }]
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "miscout"
                                        },
                                        right: {
                                            type: 'FunccallExpression',
                                            arguments: [{
                                                type: 'Association',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "r"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "macen"
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "e"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "inst"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "18"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "14"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "10010"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "m"
                                                                },
                                                                element: "mac"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "x"
                                                                },
                                                                element: "mac"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "macpipe"
                                                        }
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "miscout"
                                                        },
                                                        right: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "mulo"
                                                                },
                                                                element: "result"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "31"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "0"
                                                                }
                                                            }
                                                        }
                                                    }]
                                                },
                                                alternate: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "miscout"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "asr18"
                                                        }
                                                    }]
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "m"
                                                                },
                                                                element: "mac"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "x"
                                                                },
                                                                element: "mac"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "macpipe"
                                                        }
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "miscout"
                                                        },
                                                        right: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "mulo"
                                                                },
                                                                element: "result"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "63"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "32"
                                                                }
                                                            }
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "110"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                },
                                right: {
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "r"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mout"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "miscout"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "alu_select",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "addout",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "32"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "op1",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "op2",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "shiftout",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "logicout",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "miscout",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "res",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "me_icc",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "icco",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "divz",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mzero",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "icc"
            }, {
                type: 'Var',
                name: "aluresult"
            }, {
                type: 'Var',
                name: "azero"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "icc"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "addout"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "32"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            }
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "zero32"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "azero"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "azero"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mzero"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "azero"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "alusel"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluresult"
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "addout"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "32"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    }
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "aluadd"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "icc"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "0"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "addout"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "32"
                                                    }]
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "icc"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "1"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op1"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op2"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    }
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "addout"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "32"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            }
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "icc"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "0"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "op1"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "31"
                                                    }]
                                                },
                                                right: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "op2"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "31"
                                                    }]
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op1"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op2"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    }
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "icc"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "1"
                                            }]
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "or",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op1"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "op2"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        }]
                                                    }
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "addout"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "32"
                                                        }]
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            }
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "notag"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "10"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'SwitchStatement',
                                                    discriminant: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op3"
                                                    },
                                                    cases: [{
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "100000"
                                                        }, {
                                                            type: 'StringLiteral',
                                                            value: "100010"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "icc"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "or",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "or",
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "or",
                                                                            left: {
                                                                                type: 'BinaryExpression',
                                                                                operator: "or",
                                                                                left: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "op1"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                right: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "op1"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "op2"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'IndexExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "op2"
                                                                            },
                                                                            indexes: [{
                                                                                type: 'IntLiteral',
                                                                                value: "1"
                                                                            }]
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "icc"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'StringLiteral',
                                                            value: "100001"
                                                        }, {
                                                            type: 'StringLiteral',
                                                            value: "100011"
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "icc"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "1"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "or",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "or",
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "or",
                                                                            left: {
                                                                                type: 'BinaryExpression',
                                                                                operator: "or",
                                                                                left: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "op1"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                right: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "op1"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: 'UnaryExpression',
                                                                                operator: "not"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'UnaryExpression',
                                                                            operator: "not"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'var',
                                                                            value: "icc"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        }]
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'SwitchCase',
                                                        tests: [{
                                                            type: 'Others'
                                                        }],
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: []
                                                        }
                                                    }]
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "icc"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "2"
                                    }]
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "azero"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "01"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluresult"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "shiftout"
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluresult"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "logicout"
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "aluresult"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "zero32"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "icc"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "2"
                                            }]
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "aluresult"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "miscout"
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "e"
                            },
                            element: "jmpl"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "aluresult"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "00"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "3"
                        }]
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "aluresult"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "31"
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "divz"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "icc"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "2"
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fmt3"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op3"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "wrpsr"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icco"
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "logicout"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "23"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "20"
                                            }
                                        }
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icco"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icc"
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "wicc"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "icco"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "me_icc"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "wicc"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icco"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "icc"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "icco"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "icc"
                                    }
                                }]
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "res"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "aluresult"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "dcache_gen",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "v",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "dci",
                mode: "out ",
                typedef: {
                    type: 'TypeRecord',
                    name: "dc_in_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "signed",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "signed"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "enaddr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "enaddr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "read",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "read"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "write",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "write"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "lock",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "lock"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dsuen",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dsuen"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "size",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "size",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "1"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asi",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "asi",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "link_pc",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "jump",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "force_a2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "load",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "mcasa",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "su"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "signed"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "lock"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "dsuen"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "size"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "10"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mcasa"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "op"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ldst"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op3"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000001"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010001"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "00"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "001101"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011101"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "00"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "lock"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010010"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "01"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "001001"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011001"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "00"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "signed"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "001010"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011010"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "01"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "signed"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100000"
                                }, {
                                    type: 'StringLiteral',
                                    value: "110000"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "001111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "011111"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "lock"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "111100"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "casaen"
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "size"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "10"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "lock"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000011"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010011"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100011"
                                }, {
                                    type: 'StringLiteral',
                                    value: "110011"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "11"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000101"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010101"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "00"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000110"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010110"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "01"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000100"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010100"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100100"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "000111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "010111"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "11"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "100111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "100110"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpen"
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "size"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "11"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "110111"
                                }, {
                                    type: 'StringLiteral',
                                    value: "110110"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "cpen"
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "size"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "11"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "size"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "10"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "lock"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dci"
                                            },
                                            element: "signed"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }]
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "link_pc"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "jump"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "force_a2"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "load"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "write"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "enaddr"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "read"
                    },
                    right: {
                        type: 'UnaryExpression',
                        operator: "not"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "01"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "link_pc"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "10"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "trap"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'SwitchStatement',
                                                discriminant: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "op3"
                                                },
                                                cases: [{
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "111000"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "jump"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "link_pc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "111001"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "jump"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'Others'
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: []
                                                    }
                                                }]
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "11"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "cnt"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "00"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci"
                                                        },
                                                        element: "read"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "op3"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "3"
                                                            }]
                                                        },
                                                        right: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "load"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "op3"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "3"
                                                            }]
                                                        },
                                                        right: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci"
                                                        },
                                                        element: "enaddr"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "or",
                                                            left: {
                                                                type: 'UnaryExpression',
                                                                operator: "not"
                                                            },
                                                            right: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }]
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "3"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }]
                                                            }
                                                        }
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "01"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "force_a2"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "load"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci"
                                                        },
                                                        element: "enaddr"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "op3"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "3"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "01"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dci"
                                                                },
                                                                element: "write"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "casaen"
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "op3"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "5"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "4"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "11"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "op3"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "2"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "11"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "dci"
                                                                },
                                                                element: "enaddr"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "10"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dci"
                                                        },
                                                        element: "write"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "e"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "trap"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "v"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "ctrl"
                                                        },
                                                        element: "trap"
                                                    },
                                                    right: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dci"
                                                    },
                                                    element: "enaddr"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "casaen"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "op3"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "5"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "4"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "11"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "mcasa"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "rett"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "su"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "ps"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "su"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "s"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "su"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dci"
                                },
                                element: "asi"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "00001011"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dci"
                                },
                                element: "asi"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "00001010"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "op3"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "4"
                                }]
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "op3"
                                    },
                                    indexes: [{
                                        type: 'IntLiteral',
                                        value: "5"
                                    }]
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                }
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dci"
                                },
                                element: "asi"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "12"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "5"
                                    }
                                }
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "fpstdata",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "edata",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "eres",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "fpstdata",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "edata2",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "eres2",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "edata2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "edata"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "eres2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "eres"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpen"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpen"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "op"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ldst"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "&",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "op3"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "5"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "4"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "op3"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "2"
                                                }]
                                            }
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "101"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "/=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "cnt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "00"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "edata2"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpstdata"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "eres2"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpstdata"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casaen"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "casa"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "10"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "edata2"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "op1"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "eres2"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "op1"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "ld_align",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "data",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "dcdtype",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "-",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsets"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        }
                    },
                    typmark: "<dcdtype>"
                }
            }, {
                type: 'Arg',
                name: "set",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsetmsb"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "size",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "laddr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "1"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "signed",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [{
                type: 'Var',
                name: "align_data"
            }, {
                type: 'Var',
                name: "rdata"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "align_data"
                    },
                    right: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "data"
                        },
                        indexes: [{
                            type: 'FunccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "set"
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rdata"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "size"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "00"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "laddr"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "00"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "rdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "align_data"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "31"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "24"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "signed"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rdata"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "8"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "align_data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "31"
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "01"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "rdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "align_data"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "23"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "16"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "signed"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rdata"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "8"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "align_data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "23"
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "10"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "rdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "align_data"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "15"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "8"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "signed"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rdata"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "8"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "align_data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "15"
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "rdata"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "align_data"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "7"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "signed"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "rdata"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "8"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "align_data"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "7"
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "01"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "laddr"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "1"
                                        }]
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "rdata"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "15"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "align_data"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "15"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "signed"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "rdata"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "15"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "align_data"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "15"
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "rdata"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "15"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "align_data"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "16"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "signed"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "rdata"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "15"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'IndexExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "align_data"
                                                            },
                                                            indexes: [{
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rdata"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "align_data"
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "rdata"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "mem_trap",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "annul",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "holdn",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "trapout",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "iflush",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "nullify",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "werrout",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tt",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "5"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "cwp"
            }, {
                type: 'Var',
                name: "cwpx"
            }, {
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "nalign_d"
            }, {
                type: 'Var',
                name: "trap"
            }, {
                type: 'Var',
                name: "werr"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "cwpx"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "result"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "5"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "nwinlog2"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "cwpx"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "5"
                        }]
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "iflush"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trap"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "trap"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nullify"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "annul"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "tt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "werr"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dco"
                                },
                                element: "werr"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "werr"
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nalign_d"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "nalign"
                        },
                        right: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "result"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "2"
                            }]
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldst"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nullify"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "/=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "annul"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "trap"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "werr"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "holdn"
                                    }
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "trap"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tt"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "101011"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "werr"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ldst"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "nullify"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "/=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "op"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "00"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op2"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "fpen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "fpo"
                                                                },
                                                                element: "exc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "001000"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "cpen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "cpo"
                                                                },
                                                                element: "exc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "101000"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "10"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'SwitchStatement',
                                        discriminant: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        cases: [{
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'FunccallExpression',
                                                            arguments: [{
                                                                type: 'Association',
                                                                value: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "cwpx"
                                                                }
                                                            }]
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "000010"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "001110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "001111"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "011111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "diven"
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "m"
                                                                    },
                                                                    element: "divz"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "101010"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111000"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "111001"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "m"
                                                            },
                                                            element: "nalign"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "000111"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "100010"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "100011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "notag"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "m"
                                                                    },
                                                                    element: "icc"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "1"
                                                                }]
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "001010"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "111011"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "iflush"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110100"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110101"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "fpen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "fpo"
                                                                },
                                                                element: "exc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "001000"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'StringLiteral',
                                                value: "110110"
                                            }, {
                                                type: 'StringLiteral',
                                                value: "110111"
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "cpen"
                                                        },
                                                        right: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "cpo"
                                                                },
                                                                element: "exc"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "trap"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'1'"
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "tt"
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "101000"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'SwitchCase',
                                            tests: [{
                                                type: 'Others'
                                            }],
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: []
                                            }
                                        }]
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "11"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "m"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "cnt"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "00"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'SwitchStatement',
                                                discriminant: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "op3"
                                                },
                                                cases: [{
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "100011"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "100111"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "100110"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "fpen"
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'IfStatement',
                                                                    test: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "nalign_d"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    },
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "trap"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "tt"
                                                                            },
                                                                            right: {
                                                                                type: 'StringLiteral',
                                                                                value: "000111"
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "nullify"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        }]
                                                                    },
                                                                    alternate: {
                                                                        type: 'IfStatement',
                                                                        test: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "=",
                                                                            left: {
                                                                                type: 'BinaryExpression',
                                                                                operator: "and",
                                                                                left: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "fpo"
                                                                                    },
                                                                                    element: "exc"
                                                                                },
                                                                                right: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'MemberExpression',
                                                                                            object: {
                                                                                                type: 'Identifier',
                                                                                                phase: 'sig',
                                                                                                value: "r"
                                                                                            },
                                                                                            element: "m"
                                                                                        },
                                                                                        element: "ctrl"
                                                                                    },
                                                                                    element: "pv"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        },
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "trap"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "tt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "001000"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "nullify"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "110011"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "110111"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "110110"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "cpen"
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'IfStatement',
                                                                    test: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "nalign_d"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    },
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "trap"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "tt"
                                                                            },
                                                                            right: {
                                                                                type: 'StringLiteral',
                                                                                value: "000111"
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'Identifier',
                                                                                phase: 'name',
                                                                                value: "nullify"
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        }]
                                                                    },
                                                                    alternate: {
                                                                        type: 'IfStatement',
                                                                        test: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "=",
                                                                            left: {
                                                                                type: 'BinaryExpression',
                                                                                operator: "and",
                                                                                left: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "cpo"
                                                                                    },
                                                                                    element: "exc"
                                                                                },
                                                                                right: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'MemberExpression',
                                                                                            object: {
                                                                                                type: 'Identifier',
                                                                                                phase: 'sig',
                                                                                                value: "r"
                                                                                            },
                                                                                            element: "m"
                                                                                        },
                                                                                        element: "ctrl"
                                                                                    },
                                                                                    element: "pv"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: 'EnumLiteral',
                                                                                value: "'1'"
                                                                            }
                                                                        },
                                                                        consequence: {
                                                                            type: 'BlockStatement',
                                                                            body: [{
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "trap"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "tt"
                                                                                },
                                                                                right: {
                                                                                    type: 'StringLiteral',
                                                                                    value: "101000"
                                                                                }
                                                                            }, {
                                                                                type: 'AssignmentExpressionVar',
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "nullify"
                                                                                },
                                                                                right: {
                                                                                    type: 'EnumLiteral',
                                                                                    value: "'1'"
                                                                                }
                                                                            }]
                                                                        }
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "000011"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "000111"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010011"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010111"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "m"
                                                                        },
                                                                        element: "result"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "000"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "000111"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nullify"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "100000"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "100001"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "100101"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "100100"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "and",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fpen"
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "m"
                                                                        },
                                                                        element: "nalign"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "000111"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nullify"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            },
                                                            alternate: {
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "and",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "fpen"
                                                                    },
                                                                    right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "and",
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "fpo"
                                                                                },
                                                                                element: "exc"
                                                                            },
                                                                            right: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "m"
                                                                                    },
                                                                                    element: "ctrl"
                                                                                },
                                                                                element: "pv"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "trap"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "tt"
                                                                        },
                                                                        right: {
                                                                            type: 'StringLiteral',
                                                                            value: "001000"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "nullify"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }]
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "110000"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "110001"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "110101"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "110100"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "and",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "cpen"
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "m"
                                                                        },
                                                                        element: "nalign"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "000111"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nullify"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            },
                                                            alternate: {
                                                                type: 'IfStatement',
                                                                test: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "and",
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "cpen"
                                                                    },
                                                                    right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "=",
                                                                        left: {
                                                                            type: 'BinaryExpression',
                                                                            operator: "and",
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "cpo"
                                                                                },
                                                                                element: "exc"
                                                                            },
                                                                            right: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "m"
                                                                                    },
                                                                                    element: "ctrl"
                                                                                },
                                                                                element: "pv"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }
                                                                },
                                                                consequence: {
                                                                    type: 'BlockStatement',
                                                                    body: [{
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "trap"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "tt"
                                                                        },
                                                                        right: {
                                                                            type: 'StringLiteral',
                                                                            value: "101000"
                                                                        }
                                                                    }, {
                                                                        type: 'AssignmentExpressionVar',
                                                                        left: {
                                                                            type: 'Identifier',
                                                                            phase: 'name',
                                                                            value: "nullify"
                                                                        },
                                                                        right: {
                                                                            type: 'EnumLiteral',
                                                                            value: "'1'"
                                                                        }
                                                                    }]
                                                                }
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "000000"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010000"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "000100"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010100"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "001111"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "011111"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "111100"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "m"
                                                                        },
                                                                        element: "result"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "1"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "00"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "000111"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nullify"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'StringLiteral',
                                                        value: "000010"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010010"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "001010"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "011010"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "000110"
                                                    }, {
                                                        type: 'StringLiteral',
                                                        value: "010110"
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "/=",
                                                                left: {
                                                                    type: 'IndexExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "r"
                                                                            },
                                                                            element: "m"
                                                                        },
                                                                        element: "result"
                                                                    },
                                                                    indexes: [{
                                                                        type: 'IntLiteral',
                                                                        value: "0"
                                                                    }]
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "trap"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "tt"
                                                                    },
                                                                    right: {
                                                                        type: 'StringLiteral',
                                                                        value: "000111"
                                                                    }
                                                                }, {
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "nullify"
                                                                    },
                                                                    right: {
                                                                        type: 'EnumLiteral',
                                                                        value: "'1'"
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'SwitchCase',
                                                    tests: [{
                                                        type: 'Others'
                                                    }],
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: []
                                                    }
                                                }]
                                            }, {
                                                type: 'LoopStatement',
                                                param: {
                                                    type: 'LoopParam',
                                                    name: "i",
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "nwp"
                                                        }
                                                    }
                                                },
                                                block: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "or",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "and",
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "wpr"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'BinaryExpression',
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'name',
                                                                                        value: "i"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }
                                                                                }]
                                                                            },
                                                                            element: "load"
                                                                        },
                                                                        right: {
                                                                            type: 'UnaryExpression',
                                                                            operator: "not"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "and",
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "wpr"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'BinaryExpression',
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'name',
                                                                                        value: "i"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }
                                                                                }]
                                                                            },
                                                                            element: "store"
                                                                        },
                                                                        right: {
                                                                            type: 'IndexExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'var',
                                                                                value: "op3"
                                                                            },
                                                                            indexes: [{
                                                                                type: 'IntLiteral',
                                                                                value: "2"
                                                                            }]
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "and",
                                                                    left: {
                                                                        type: 'BinaryExpression',
                                                                        operator: "xor",
                                                                        left: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "wpr"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'BinaryExpression',
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'name',
                                                                                        value: "i"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }
                                                                                }]
                                                                            },
                                                                            element: "addr"
                                                                        },
                                                                        right: {
                                                                            type: 'SliceExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "r"
                                                                                    },
                                                                                    element: "m"
                                                                                },
                                                                                element: "result"
                                                                            },
                                                                            range: {
                                                                                type: 'RangeExpression',
                                                                                left: {
                                                                                    type: 'IntLiteral',
                                                                                    value: "31"
                                                                                },
                                                                                right: {
                                                                                    type: 'IntLiteral',
                                                                                    value: "2"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'IndexExpression',
                                                                            object: {
                                                                                type: 'Identifier',
                                                                                phase: 'sig',
                                                                                value: "wpr"
                                                                            },
                                                                            indexes: [{
                                                                                type: 'BinaryExpression',
                                                                                operator: "-",
                                                                                left: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'name',
                                                                                    value: "i"
                                                                                },
                                                                                right: {
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                }
                                                                            }]
                                                                        },
                                                                        element: "mask"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'const',
                                                                        value: "zero32"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "trap"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "tt"
                                                                },
                                                                right: {
                                                                    type: 'StringLiteral',
                                                                    value: "001011"
                                                                }
                                                            }, {
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "nullify"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'1'"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rstn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "rstate"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsu2"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "werr"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trapout"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trap"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "werrout"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "werr"
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "irq_trap",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "ir",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "irestart_register",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "addr",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "addr"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "irl",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "annul",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "pv",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "trap",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tt",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "5"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "nullify",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "irqen",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "irqen2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "nullify2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "trap2",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "ipend",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "tt2",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "5"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "pend"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nullify2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "nullify"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trap2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "trap"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tt2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "irqen"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "irqen2"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "irqen"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "annul"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fmt3"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "op3"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "wrpsr"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "irqen"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "irl"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "1111"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: ">",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "irl"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "pil"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pend"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "irqen"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "irqen2"
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "et"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pend"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ipend"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pend"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pv"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pend"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "trap2"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tt2"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'StringLiteral',
                                    value: "01"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "irl"
                                }
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldst"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nullify2"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "irq_intack",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "holdn",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "intack",
                mode: "out ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }],
            decl: [],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "intack"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "rstate"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "trap"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tt"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "7"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "4"
                                        }
                                    }
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "0001"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "intack"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "sp_write",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "wpr",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }, {
                type: 'Arg',
                name: "s",
                mode: "out ",
                typedef: {
                    type: 'TypeRecord',
                    name: "special_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "cwp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "cwp"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "icc",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "icc",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tt",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tt",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "7"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "tba",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "tba",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "19"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "wim",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "wim",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "nwin"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "pil",
                        typedef: {
                            type: 'TypeConstrainedArray',
                            name: "pil",
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "3"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            typmark: "std_logic_vector"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ec",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ec"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ef",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ef"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "ps",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "ps"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "s",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "s"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "et",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "et"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "y",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "y"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "asr18",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "asr18"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "svt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "svt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dwt",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dwt"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "dbp",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "dbp"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "vwpr",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "watchpoint_registers",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "0"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    typmark: "<watchpoint_registers>"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op2"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "rd"
            }, {
                type: 'Var',
                name: "i"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "22"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "s"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "w"
                        },
                        element: "s"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rd"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "29"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vwpr"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wpr"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110000"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "rd"
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "00000"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "y"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "result"
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "macen"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "rd"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "10010"
                                                        }
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "s"
                                                            },
                                                            element: "asr18"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "result"
                                                        }
                                                    }]
                                                },
                                                alternate: {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "rd"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "10001"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "bp"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "s"
                                                                        },
                                                                        element: "dbp"
                                                                    },
                                                                    right: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "r"
                                                                                },
                                                                                element: "x"
                                                                            },
                                                                            element: "result"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "27"
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }, {
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "s"
                                                                },
                                                                element: "dwt"
                                                            },
                                                            right: {
                                                                type: 'IndexExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "x"
                                                                    },
                                                                    element: "result"
                                                                },
                                                                indexes: [{
                                                                    type: 'IntLiteral',
                                                                    value: "14"
                                                                }]
                                                            }
                                                        }, {
                                                            type: 'IfStatement',
                                                            test: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "svt"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "1"
                                                                }
                                                            },
                                                            consequence: {
                                                                type: 'BlockStatement',
                                                                body: [{
                                                                    type: 'AssignmentExpressionVar',
                                                                    left: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "s"
                                                                        },
                                                                        element: "svt"
                                                                    },
                                                                    right: {
                                                                        type: 'IndexExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "r"
                                                                                },
                                                                                element: "x"
                                                                            },
                                                                            element: "result"
                                                                        },
                                                                        indexes: [{
                                                                            type: 'IntLiteral',
                                                                            value: "13"
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    },
                                                    alternate: {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "=",
                                                            left: {
                                                                type: 'SliceExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "rd"
                                                                },
                                                                range: {
                                                                    type: 'RangeExpression',
                                                                    left: {
                                                                        type: 'IntLiteral',
                                                                        value: "4"
                                                                    },
                                                                    right: {
                                                                        type: 'IntLiteral',
                                                                        value: "3"
                                                                    }
                                                                }
                                                            },
                                                            right: {
                                                                type: 'StringLiteral',
                                                                value: "11"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'SwitchStatement',
                                                                discriminant: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "rd"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "2"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "0"
                                                                        }
                                                                    }
                                                                },
                                                                cases: [{
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "000"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                element: "addr"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                element: "exec"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "001"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                element: "mask"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                element: "load"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                }]
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "0"
                                                                                    }]
                                                                                },
                                                                                element: "store"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "010"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                },
                                                                                element: "addr"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                },
                                                                                element: "exec"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "011"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                },
                                                                                element: "mask"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                },
                                                                                element: "load"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                }]
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "1"
                                                                                    }]
                                                                                },
                                                                                element: "store"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "100"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }]
                                                                                },
                                                                                element: "addr"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }]
                                                                                },
                                                                                element: "exec"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "101"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }]
                                                                                },
                                                                                element: "mask"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }]
                                                                                },
                                                                                element: "load"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                }]
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }]
                                                                                },
                                                                                element: "store"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'StringLiteral',
                                                                        value: "110"
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "3"
                                                                                    }]
                                                                                },
                                                                                element: "addr"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "3"
                                                                                    }]
                                                                                },
                                                                                element: "exec"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    type: 'SwitchCase',
                                                                    tests: [{
                                                                        type: 'Others'
                                                                    }],
                                                                    consequence: {
                                                                        type: 'BlockStatement',
                                                                        body: [{
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "3"
                                                                                    }]
                                                                                },
                                                                                element: "mask"
                                                                            },
                                                                            right: {
                                                                                type: 'SliceExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                range: {
                                                                                    type: 'RangeExpression',
                                                                                    left: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "31"
                                                                                    },
                                                                                    right: {
                                                                                        type: 'IntLiteral',
                                                                                        value: "2"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "3"
                                                                                    }]
                                                                                },
                                                                                element: "load"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "1"
                                                                                }]
                                                                            }
                                                                        }, {
                                                                            type: 'AssignmentExpressionVar',
                                                                            left: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'IndexExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "vwpr"
                                                                                    },
                                                                                    indexes: [{
                                                                                        type: 'IntLiteral',
                                                                                        value: "3"
                                                                                    }]
                                                                                },
                                                                                element: "store"
                                                                            },
                                                                            right: {
                                                                                type: 'IndexExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'MemberExpression',
                                                                                        object: {
                                                                                            type: 'Identifier',
                                                                                            phase: 'sig',
                                                                                            value: "r"
                                                                                        },
                                                                                        element: "x"
                                                                                    },
                                                                                    element: "result"
                                                                                },
                                                                                indexes: [{
                                                                                    type: 'IntLiteral',
                                                                                    value: "0"
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }]
                                                            }]
                                                        }
                                                    }
                                                }
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110001"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "cwp"
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "-",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "nwinlog2"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "icc"
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "23"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "20"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "ec"
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "13"
                                                }]
                                            }
                                        }, {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "fpen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "ef"
                                                    },
                                                    right: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "result"
                                                        },
                                                        indexes: [{
                                                            type: 'IntLiteral',
                                                            value: "12"
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "pil"
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "11"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "8"
                                                    }
                                                }
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "s"
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "7"
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "ps"
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "6"
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "et"
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "5"
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110010"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "wim"
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "-",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "nwin"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }
                                                }
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "110011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "tba"
                                            },
                                            right: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "result"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "31"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "12"
                                                    }
                                                }
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111100"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmin"
                                                    }
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmax"
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "-",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "cwp"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111101"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmax"
                                                    }
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmin"
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "+",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "cwp"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111001"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmax"
                                                    }
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "cwpmin"
                                                    }
                                                }]
                                            },
                                            alternate: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "+",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "cwp"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "1"
                                                        }
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "s"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "w"
                                                    },
                                                    element: "s"
                                                },
                                                element: "ps"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "s"
                                                },
                                                element: "et"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "s"
                                },
                                element: "icc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "icc"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "wy"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "s"
                                },
                                element: "y"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "y"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "macpipe"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "mac"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "s"
                                },
                                element: "asr18"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "mulo"
                                    },
                                    element: "result"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "s"
                                },
                                element: "y"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "mulo"
                                    },
                                    element: "result"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "63"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    }
                                }
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'Subprog',
            name: "npc_find",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "npc"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "npc"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "011"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "pv"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "npc"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "000"
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "npc"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "001"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pv"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "npc"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "010"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "pv"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "npc"
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "011"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "/=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "v8"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "npc"
                                            },
                                            right: {
                                                type: 'StringLiteral',
                                                value: "100"
                                            }
                                        }]
                                    }
                                }
                            }
                        }
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "npc"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "npc_gen",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "npc"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "npc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "&",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "pc"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        },
                        right: {
                            type: 'StringLiteral',
                            value: "00"
                        }
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "npc"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "000"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "npc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "001"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "npc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "010"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "npc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "011"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "npc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "a"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "/=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "v8"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "npc"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "2"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "d"
                                                },
                                                element: "pc"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "2"
                                                }
                                            }
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "npc"
                }]
            }]
        }, {
            type: 'Subprog',
            name: "mul_res",
            ftyp: "procedure",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "asr18in",
                mode: "in ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "result",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "y",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "asr18",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    name: "word",
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }, {
                type: 'Arg',
                name: "icc",
                mode: "out ",
                typedef: {
                    type: 'TypeConstrainedArray',
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "3"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "0"
                        }
                    },
                    typmark: "std_logic_vector"
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "result"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "result"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "y"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "y"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "icc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "icc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "asr18"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "asr18in"
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'StringLiteral',
                            value: "10"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'SwitchStatement',
                                discriminant: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "op3"
                                },
                                cases: [{
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "result"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "y"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "63"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "32"
                                                            }
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "011010"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011011"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "mulen"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "result"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "icc"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "mulo"
                                                        },
                                                        element: "icc"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "y"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "63"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "32"
                                                            }
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "111110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "111111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "macen"
                                                },
                                                right: {
                                                    type: 'UnaryExpression',
                                                    operator: "not"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "result"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "asr18"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "y"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "mulo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "63"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "32"
                                                            }
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "001110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "001111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "diven"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "result"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "divo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'StringLiteral',
                                        value: "011110"
                                    }, {
                                        type: 'StringLiteral',
                                        value: "011111"
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'IfStatement',
                                            test: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "diven"
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "result"
                                                    },
                                                    right: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "divo"
                                                            },
                                                            element: "result"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'IntLiteral',
                                                                value: "31"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "icc"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "divo"
                                                        },
                                                        element: "icc"
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'SwitchCase',
                                    tests: [{
                                        type: 'Others'
                                    }],
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: []
                                    }
                                }]
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }]
            }]
        }, {
            type: 'Subprog',
            name: "powerdwn",
            ftyp: "function",
            arguments: [{
                type: 'Arg',
                name: "r",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "registers",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "f",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "f"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "d",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "d"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "a",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "a"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "e",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "e"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "m",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "m"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "x",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "x"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "w",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "w"
                        }
                    }]
                }
            }, {
                type: 'Arg',
                name: "trap",
                mode: "in ",
                typedef: {
                    type: 'TypeEnum',
                    name: "std_logic"
                }
            }, {
                type: 'Arg',
                name: "rp",
                mode: "in ",
                typedef: {
                    type: 'TypeRecord',
                    name: "pwd_register_type",
                    entries: [{
                        type: 'RecordEntry',
                        tag: "pwd",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "pwd"
                        }
                    }, {
                        type: 'RecordEntry',
                        tag: "error",
                        typedef: {
                            type: 'TypeRef',
                            typedef: "error"
                        }
                    }]
                }
            }],
            decl: [{
                type: 'Var',
                name: "op"
            }, {
                type: 'Var',
                name: "op3"
            }, {
                type: 'Var',
                name: "rd"
            }, {
                type: 'Var',
                name: "pd"
            }],
            seq: [{
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "30"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "op3"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "24"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "19"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rd"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "29"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "25"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pd"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'UnaryExpression',
                                operator: "not"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fmt3"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "wry"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rd"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "10011"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pd"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pd"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "pd"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "rp"
                                    },
                                    element: "pwd"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'Identifier',
                    phase: 'name',
                    value: "pd"
                }]
            }]
        }]
    };
    /* signals */
    this._ssig = {
        decls: [{
            type: 'Signal',
            name: "bpred",
            typdef: {
                type: 'TypeEnum',
                name: "std_logic"
            }
        }, {
            type: 'Signal',
            name: "r",
            typdef: {
                type: 'TypeRecord',
                name: "registers",
                entries: [{
                    type: 'RecordEntry',
                    tag: "f",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "f"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "d",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "d"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "a",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "a"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "e",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "e"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "m",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "m"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "x",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "x"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "w",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "w"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "rin",
            typdef: {
                type: 'TypeRecord',
                name: "registers",
                entries: [{
                    type: 'RecordEntry',
                    tag: "f",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "f"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "d",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "d"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "a",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "a"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "e",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "e"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "m",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "m"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "x",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "x"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "w",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "w"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "wpr",
            typdef: {
                type: 'TypeConstrainedArray',
                name: "watchpoint_registers",
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "3"
                    }
                },
                typmark: "<watchpoint_registers>"
            }
        }, {
            type: 'Signal',
            name: "wprin",
            typdef: {
                type: 'TypeConstrainedArray',
                name: "watchpoint_registers",
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "0"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "3"
                    }
                },
                typmark: "<watchpoint_registers>"
            }
        }, {
            type: 'Signal',
            name: "dsur",
            typdef: {
                type: 'TypeRecord',
                name: "dsu_registers",
                entries: [{
                    type: 'RecordEntry',
                    tag: "tt",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "tt",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "7"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "err",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "err"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "tbufcnt",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "tbufcnt",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tbufbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "asi",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "asi",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "7"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "crdy",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "crdy",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "dsuin",
            typdef: {
                type: 'TypeRecord',
                name: "dsu_registers",
                entries: [{
                    type: 'RecordEntry',
                    tag: "tt",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "tt",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "7"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "err",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "err"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "tbufcnt",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "tbufcnt",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tbufbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "asi",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "asi",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "7"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "crdy",
                    typedef: {
                        type: 'TypeConstrainedArray',
                        name: "crdy",
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "2"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "1"
                            }
                        },
                        typmark: "std_logic_vector"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "ir",
            typdef: {
                type: 'TypeRecord',
                name: "irestart_register",
                entries: [{
                    type: 'RecordEntry',
                    tag: "addr",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "addr"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "pwd",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "pwd"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "irin",
            typdef: {
                type: 'TypeRecord',
                name: "irestart_register",
                entries: [{
                    type: 'RecordEntry',
                    tag: "addr",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "addr"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "pwd",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "pwd"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "rp",
            typdef: {
                type: 'TypeRecord',
                name: "pwd_register_type",
                entries: [{
                    type: 'RecordEntry',
                    tag: "pwd",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "pwd"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "error",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "error"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "rpin",
            typdef: {
                type: 'TypeRecord',
                name: "pwd_register_type",
                entries: [{
                    type: 'RecordEntry',
                    tag: "pwd",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "pwd"
                    }
                }, {
                    type: 'RecordEntry',
                    tag: "error",
                    typedef: {
                        type: 'TypeRef',
                        typedef: "error"
                    }
                }]
            }
        }, {
            type: 'Signal',
            name: "dummy",
            typdef: {
                type: 'TypeEnum',
                name: "std_logic"
            }
        }, {
            type: 'Signal',
            name: "cpu_index",
            typdef: {
                type: 'TypeConstrainedArray',
                range: {
                    type: 'RangeExpression',
                    left: {
                        type: 'IntLiteral',
                        value: "3"
                    },
                    right: {
                        type: 'IntLiteral',
                        value: "0"
                    }
                },
                typmark: "std_logic_vector"
            }
        }, {
            type: 'Signal',
            name: "disasen",
            typdef: {
                type: 'TypeEnum',
                name: "std_logic"
            }
        }]
    };

    /* concurrent */
    this._ccr = {
        type: 'AssignmentExpressionSig',
        left: {
            type: 'Identifier',
            phase: 'name',
            value: "bpred"
        },
        right: [{
            type: 'Waveform',
            list: [{
                type: 'WaveformElem',
                value: {
                    type: 'EnumLiteral',
                    value: "'0'"
                }
            }]
        }, {
            type: 'Waveform',
            list: [{
                type: 'WaveformElem',
                value: {
                    type: 'EnumLiteral',
                    value: "'1'"
                }
            }]
        }, {
            type: 'Waveform',
            list: [{
                type: 'WaveformElem',
                value: {
                    type: 'UnaryExpression',
                    operator: "not"
                }
            }]
        }]
    } {
        type: 'Generate',
        concur: [ /* process process dsureg(arch Hdl::Generate=HASH(0x7fd5faa7e2d0)) */
            function _t_(_p, _n, _g, _port) {
                hdl.obj(this, _p, _n);
                this._seq = {
                    type: 'BlockStatement',
                    body: [{
                        type: 'IfStatement',
                        test: {
                            type: 'FunccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "clk"
                                }
                            }]
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "holdn"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "dsur"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "dsuin"
                                                }
                                            }]
                                        }]
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "crdy"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dsuin"
                                                    },
                                                    element: "crdy"
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "/=",
                                        left: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'const',
                                                value: "need_extra_sync_reset"
                                            },
                                            indexes: [{
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "fabtech"
                                            }]
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rstn"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "err"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "tbufcnt"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "tt"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "asi"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "crdy"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }]
                        }
                    }]
                };
                this.elaborate = function() {}
            }
        ],
        param: {
            type: 'Identifier',
            phase: 'name',
            value: "dbgunit"
        }
    } {
        type: 'Generate',
        concur: [{
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "dsur"
                },
                element: "err"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "dsur"
                },
                element: "tbufcnt"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "dsur"
                },
                element: "tt"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "dsur"
                },
                element: "asi"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "dsur"
                },
                element: "crdy"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }],
        param: {
            type: 'UnaryExpression',
            operator: "not"
        }
    } {
        type: 'Generate',
        concur: [ /* process process dsureg(arch Hdl::Generate=HASH(0x7fd601cbcae0)) */
            function _t_(_p, _n, _g, _port) {
                hdl.obj(this, _p, _n);
                this._seq = {
                    type: 'BlockStatement',
                    body: [{
                        type: 'IfStatement',
                        test: {
                            type: 'FunccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "clk"
                                }
                            }]
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "holdn"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ir"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "irin"
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }]
                        }
                    }]
                };
                this.elaborate = function() {}
            }
        ],
        param: {
            type: 'BinaryExpression',
            operator: "or",
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "dbgunit"
            },
            right: {
                type: 'Identifier',
                phase: 'name',
                value: "pwrd2"
            }
        }
    } {
        type: 'Generate',
        concur: [{
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "ir"
                },
                element: "pwd"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'MemberExpression',
                object: {
                    type: 'Identifier',
                    phase: 'sig',
                    value: "ir"
                },
                element: "addr"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }]
            }]
        }],
        param: {
            type: 'UnaryExpression',
            operator: "not"
        }
    } {
        type: 'Generate',
        concur: [{
            type: 'Generate',
            concur: [ /* process process wpreg(arch Hdl::Generate=HASH(0x7fd601cf1518)) */
                function _t_(_p, _n, _g, _port) {
                    hdl.obj(this, _p, _n);
                    this._seq = {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "clk"
                                    }
                                }]
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "holdn"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionSig',
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "wpr"
                                                },
                                                indexes: [{
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "i"
                                                }]
                                            },
                                            right: [{
                                                type: 'Waveform',
                                                list: [{
                                                    type: 'WaveformElem',
                                                    value: {
                                                        type: 'IndexExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "wprin"
                                                        },
                                                        indexes: [{
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "i"
                                                        }]
                                                    }
                                                }]
                                            }]
                                        }]
                                    }
                                }, {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rstn"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionSig',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "wpr"
                                                    },
                                                    indexes: [{
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "i"
                                                    }]
                                                },
                                                element: "exec"
                                            },
                                            right: [{
                                                type: 'Waveform',
                                                list: [{
                                                    type: 'WaveformElem',
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }]
                                        }, {
                                            type: 'AssignmentExpressionSig',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "wpr"
                                                    },
                                                    indexes: [{
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "i"
                                                    }]
                                                },
                                                element: "load"
                                            },
                                            right: [{
                                                type: 'Waveform',
                                                list: [{
                                                    type: 'WaveformElem',
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }]
                                        }, {
                                            type: 'AssignmentExpressionSig',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "wpr"
                                                    },
                                                    indexes: [{
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "i"
                                                    }]
                                                },
                                                element: "store"
                                            },
                                            right: [{
                                                type: 'Waveform',
                                                list: [{
                                                    type: 'WaveformElem',
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }]
                                        }]
                                    }
                                }]
                            }
                        }]
                    };
                    this.elaborate = function() {}
                }
            ],
            param: {
                type: 'BinaryExpression',
                operator: ">",
                left: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "nwp"
                },
                right: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "i"
                }
            }
        }, {
            type: 'Generate',
            concur: [{
                type: 'AssignmentExpressionSig',
                left: {
                    type: 'IndexExpression',
                    object: {
                        type: 'Identifier',
                        phase: 'sig',
                        value: "wpr"
                    },
                    indexes: [{
                        type: 'Identifier',
                        phase: 'name',
                        value: "i"
                    }]
                },
                right: [{
                    type: 'Waveform',
                    list: [{
                        type: 'WaveformElem',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "wpr_none"
                        }
                    }]
                }]
            }],
            param: {
                type: 'BinaryExpression',
                operator: "<=",
                left: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "nwp"
                },
                right: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "i"
                }
            }
        }],
        param: {
            type: 'LoopParam',
            name: "i",
            range: {
                type: 'RangeExpression',
                left: {
                    type: 'IntLiteral',
                    value: "0"
                },
                right: {
                    type: 'IntLiteral',
                    value: "3"
                }
            }
        }
    } {
        type: 'Generate',
        concur: [ /* process process trc(arch Hdl::Generate=HASH(0x7fd5faae1b60)) */
            function _t_(_p, _n, _g, _port) {
                hdl.obj(this, _p, _n);
                this._seq = {
                    type: 'BlockStatement',
                    body: [{
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "disas"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "clk"
                                        }
                                    }]
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rstn"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "/=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fpu"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op"
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "30"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "op3"
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "24"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "19"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpins"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "op"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "fmt3"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op3"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpop1"
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op3"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpop2"
                                                    }
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpld"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "op"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "ldst"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "op3"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "ldf"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "op3"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "lddf"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "op3"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ldfsr"
                                                    }
                                                }
                                            }
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpins"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "false"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fpld"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "false"
                                        }
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "valid"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "pv"
                                            }
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    right: {
                                        type: 'UnaryExpression',
                                        operator: "not"
                                    }
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "valid"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "valid"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "holdn"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "clk"
                                            }
                                        }]
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rstn"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'ProccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "index"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'BinaryExpression',
                                                operator: "&",
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "ctrl"
                                                        },
                                                        element: "pc"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'IntLiteral',
                                                            value: "2"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'StringLiteral',
                                                    value: "00"
                                                }
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "rin"
                                                    },
                                                    element: "w"
                                                },
                                                element: "result"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "valid"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "trap"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "w"
                                                    },
                                                    element: "wreg"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "false"
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }
                    }]
                };
                this.elaborate = function() {}
            }
        ],
        param: {
            type: 'BinaryExpression',
            operator: "=",
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "disas"
            },
            right: {
                type: 'IntLiteral',
                value: "1"
            }
        }
    } {
        type: 'Generate',
        concur: [{
            type: 'AssignmentExpressionSig',
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "dummy"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }]
            }]
        }],
        param: {
            type: 'BinaryExpression',
            operator: "<",
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "disas"
            },
            right: {
                type: 'IntLiteral',
                value: "2"
            }
        }
    } {
        type: 'Generate',
        concur: [{
            type: 'AssignmentExpressionSig',
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "disasen"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'EnumLiteral',
                        value: "'1'"
                    }
                }]
            }, {
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }]
            }]
        }, {
            type: 'AssignmentExpressionSig',
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "cpu_index"
            },
            right: [{
                type: 'Waveform',
                list: [{
                    type: 'WaveformElem',
                    value: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "index"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'IntLiteral',
                                value: "4"
                            }
                        }]
                    }
                }]
            }]
        }, {
            type: 'ComponentStatement',
            name: "cpu_disasx",
            label: "x0",
            generics: [],
            ports: [{
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "clk"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "rstn"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "dummy"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "ctrl"
                    },
                    element: "inst"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'SliceExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "ctrl"
                        },
                        element: "pc"
                    },
                    range: {
                        type: 'RangeExpression',
                        left: {
                            type: 'IntLiteral',
                            value: "31"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "2"
                        }
                    }
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rin"
                        },
                        element: "w"
                    },
                    element: "result"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "cpu_index"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rin"
                        },
                        element: "w"
                    },
                    element: "wreg"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "ctrl"
                    },
                    element: "annul"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "holdn"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "ctrl"
                    },
                    element: "pv"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'MemberExpression',
                    object: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "ctrl"
                    },
                    element: "trap"
                }
            }, {
                type: 'Association',
                value: {
                    type: 'Identifier',
                    phase: 'name',
                    value: "disasen"
                }
            }]
        }],
        param: {
            type: 'BinaryExpression',
            operator: ">",
            left: {
                type: 'Identifier',
                phase: 'name',
                value: "disas"
            },
            right: {
                type: 'IntLiteral',
                value: "1"
            }
        }
    };
    /* processes */
    this._prc = /* process process comb(arch rtl of iu3) */
        function _t_(_p, _n, _g, _port) {
            hdl.obj(this, _p, _n);
            this._seq = {
                type: 'BlockStatement',
                body: [{
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "v"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "r"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vwpr"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wpr"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vdsu"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dsur"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vp"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rp"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_fpexack"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "sidle"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpcdbgwr"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "vir"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ir"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_rstn"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rstn"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_exception"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_halt"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "icnt"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fcnt"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_waddr"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "xc_waddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "rd"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_trap"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "mexc"
                        },
                        right: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "trap"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "nerror"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rp"
                        },
                        element: "error"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "mexc"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_vectt"
                            },
                            right: {
                                type: 'SimpleAggregate',
                                entries: []
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "tt"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tt_ticc"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_vectt"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "result"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "6"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }
                            }]
                        },
                        alternate: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_vectt"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'StringLiteral',
                                        value: "00"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "tt"
                                    }
                                }
                            }]
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "svt"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "xc_trap_address"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "tba"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_vectt"
                                }
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "xc_trap_address"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    }
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "tba"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "00000000"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "xc_trap_address"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "3"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pclow"
                            }
                        }
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_wreg"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "annul_all"
                    },
                    right: {
                        type: 'EnumLiteral',
                        value: "'0'"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "ld"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "lddel"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_result"
                                    },
                                    right: {
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "data"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "set"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "dci"
                                                },
                                                element: "size"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "laddr"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "dci"
                                                },
                                                element: "signed"
                                            }
                                        }]
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_result"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "macen"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "macpipe"
                                }
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "mac"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_result"
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "mulo"
                                        },
                                        element: "result"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                }
                            }]
                        },
                        alternate: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_result"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "result"
                                }
                            }]
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_df_result"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_result"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dbgm"
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "r"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dbgi"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_trap"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_vectt"
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dbgi"
                                        },
                                        element: "dsuen"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dbgi"
                                        },
                                        element: "dbreak"
                                    }
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "debug"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dbgm"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "debug"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "pwrd2"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pwrd"
                            },
                            right: {
                                type: 'FunccallExpression',
                                arguments: [{
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "r"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_trap"
                                    }
                                }, {
                                    type: 'Association',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rp"
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pwrd"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'SwitchStatement',
                    discriminant: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "x"
                        },
                        element: "rstate"
                    },
                    cases: [{
                        type: 'SwitchCase',
                        tests: [{
                            type: 'EnumLiteral',
                            value: "run"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "pv"
                                            }
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "icnt"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "holdn"
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dbgm"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "annul_all"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vir"
                                            },
                                            element: "addr"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "pc"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "rstate"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "dsu1"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "debug"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "npc"
                                        },
                                        right: {
                                            type: 'FunccallExpression',
                                            arguments: [{
                                                type: 'Association',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "r"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vdsu"
                                            },
                                            element: "tt"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "xc_vectt"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vdsu"
                                            },
                                            element: "err"
                                        },
                                        right: {
                                            type: 'FunccallExpression',
                                            arguments: [{
                                                type: 'Association',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "r"
                                                }
                                            }, {
                                                type: 'Association',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "dbgi"
                                                }
                                            }, {
                                                type: 'Association',
                                                value: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "xc_vectt"
                                                }
                                            }]
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "pwrd"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "ir"
                                                },
                                                element: "pwd"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "annul_all"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "vir"
                                                },
                                                element: "addr"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "pc"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "rstate"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "dsu1"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "npc"
                                            },
                                            right: {
                                                type: 'FunccallExpression',
                                                arguments: [{
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "r"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "vp"
                                                },
                                                element: "pwd"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "annul"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "xc_trap"
                                                }
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "xc_wreg"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "wreg"
                                                }
                                            }, {
                                                type: 'ProccallExpression',
                                                arguments: [{
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "r"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "wpr"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "vwpr"
                                                    }
                                                }]
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vir"
                                                    },
                                                    element: "pwd"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }, {
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "x"
                                                                },
                                                                element: "ctrl"
                                                            },
                                                            element: "pv"
                                                        },
                                                        right: {
                                                            type: 'UnaryExpression',
                                                            operator: "not"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "icnt"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "holdn"
                                                        }
                                                    }, {
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "and",
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "=",
                                                                left: {
                                                                    type: 'SliceExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'Identifier',
                                                                                    phase: 'sig',
                                                                                    value: "r"
                                                                                },
                                                                                element: "x"
                                                                            },
                                                                            element: "ctrl"
                                                                        },
                                                                        element: "inst"
                                                                    },
                                                                    range: {
                                                                        type: 'RangeExpression',
                                                                        left: {
                                                                            type: 'IntLiteral',
                                                                            value: "31"
                                                                        },
                                                                        right: {
                                                                            type: 'IntLiteral',
                                                                            value: "30"
                                                                        }
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fmt3"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'BinaryExpression',
                                                                operator: "or",
                                                                left: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "r"
                                                                                    },
                                                                                    element: "x"
                                                                                },
                                                                                element: "ctrl"
                                                                            },
                                                                            element: "inst"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "24"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "19"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "fpop1"
                                                                    }
                                                                },
                                                                right: {
                                                                    type: 'BinaryExpression',
                                                                    operator: "=",
                                                                    left: {
                                                                        type: 'SliceExpression',
                                                                        object: {
                                                                            type: 'MemberExpression',
                                                                            object: {
                                                                                type: 'MemberExpression',
                                                                                object: {
                                                                                    type: 'MemberExpression',
                                                                                    object: {
                                                                                        type: 'Identifier',
                                                                                        phase: 'sig',
                                                                                        value: "r"
                                                                                    },
                                                                                    element: "x"
                                                                                },
                                                                                element: "ctrl"
                                                                            },
                                                                            element: "inst"
                                                                        },
                                                                        range: {
                                                                            type: 'RangeExpression',
                                                                            left: {
                                                                                type: 'IntLiteral',
                                                                                value: "24"
                                                                            },
                                                                            right: {
                                                                                type: 'IntLiteral',
                                                                                value: "19"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: 'Identifier',
                                                                        phase: 'name',
                                                                        value: "fpop2"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "fcnt"
                                                                },
                                                                right: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "holdn"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'IfStatement',
                                            test: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'UnaryExpression',
                                                        operator: "not"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_trap"
                                                    }
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            },
                                            consequence: {
                                                type: 'BlockStatement',
                                                body: [{
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_exception"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_result"
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'SliceExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'MemberExpression',
                                                                        object: {
                                                                            type: 'Identifier',
                                                                            phase: 'sig',
                                                                            value: "r"
                                                                        },
                                                                        element: "x"
                                                                    },
                                                                    element: "ctrl"
                                                                },
                                                                element: "pc"
                                                            },
                                                            range: {
                                                                type: 'RangeExpression',
                                                                left: {
                                                                    type: 'IntLiteral',
                                                                    value: "31"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "2"
                                                                }
                                                            }
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "00"
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_wreg"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "v"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "tt"
                                                    },
                                                    right: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_vectt"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "v"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "ps"
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "s"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "v"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "s"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "annul_all"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "rstate"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "trap"
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_waddr"
                                                    },
                                                    right: {
                                                        type: 'Aggregate',
                                                        entries: [{
                                                            type: 'AggregateEntry',
                                                            tags: [{
                                                                type: 'Others'
                                                            }],
                                                            value: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'SliceExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "xc_waddr"
                                                        },
                                                        range: {
                                                            type: 'RangeExpression',
                                                            left: {
                                                                type: 'BinaryExpression',
                                                                operator: "+",
                                                                left: {
                                                                    type: 'Identifier',
                                                                    phase: 'name',
                                                                    value: "nwinlog2"
                                                                },
                                                                right: {
                                                                    type: 'IntLiteral',
                                                                    value: "3"
                                                                }
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        }
                                                    },
                                                    right: {
                                                        type: 'BinaryExpression',
                                                        operator: "&",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "cwp"
                                                        },
                                                        right: {
                                                            type: 'StringLiteral',
                                                            value: "0001"
                                                        }
                                                    }
                                                }, {
                                                    type: 'AssignmentExpressionVar',
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "npc"
                                                    },
                                                    right: {
                                                        type: 'FunccallExpression',
                                                        arguments: [{
                                                            type: 'Association',
                                                            value: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "r"
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    type: 'ProccallExpression',
                                                    arguments: [{
                                                        type: 'Association',
                                                        value: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "r"
                                                        }
                                                    }, {
                                                        type: 'Association',
                                                        value: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "xc_fpexack"
                                                        }
                                                    }]
                                                }, {
                                                    type: 'IfStatement',
                                                    test: {
                                                        type: 'BinaryExpression',
                                                        operator: "=",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'sig',
                                                                        value: "r"
                                                                    },
                                                                    element: "w"
                                                                },
                                                                element: "s"
                                                            },
                                                            element: "et"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    },
                                                    consequence: {
                                                        type: 'BlockStatement',
                                                        body: [{
                                                            type: 'AssignmentExpressionVar',
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "xc_wreg"
                                                            },
                                                            right: {
                                                                type: 'EnumLiteral',
                                                                value: "'0'"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }
                                    }
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'EnumLiteral',
                            value: "trap"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_result"
                                },
                                right: {
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "r"
                                        }
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_wreg"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_waddr"
                                },
                                right: {
                                    type: 'Aggregate',
                                    entries: [{
                                        type: 'AggregateEntry',
                                        tags: [{
                                            type: 'Others'
                                        }],
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }]
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "xc_waddr"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "+",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "nwinlog2"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "3"
                                            }
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "&",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "cwp"
                                    },
                                    right: {
                                        type: 'StringLiteral',
                                        value: "0010"
                                    }
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "et"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "w"
                                                },
                                                element: "s"
                                            },
                                            element: "et"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "rstate"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "run"
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    },
                                                    element: "cwp"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "cwpmin"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    },
                                                    element: "cwp"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "cwpmax"
                                                }
                                            }]
                                        },
                                        alternate: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    },
                                                    element: "cwp"
                                                },
                                                right: {
                                                    type: 'BinaryExpression',
                                                    operator: "-",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'sig',
                                                                    value: "r"
                                                                },
                                                                element: "w"
                                                            },
                                                            element: "s"
                                                        },
                                                        element: "cwp"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "1"
                                                    }
                                                }
                                            }]
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "rstate"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "dsu1"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "xc_wreg"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vp"
                                            },
                                            element: "error"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'EnumLiteral',
                            value: "dsu1"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_exception"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "x"
                                    },
                                    element: "annul_all"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "xc_trap_address"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "pclow"
                                        }
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "f"
                                    },
                                    element: "pc"
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "dbgunit"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "pwrd2"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "/=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "smp"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "xc_trap_address"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "pclow"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "ir"
                                            },
                                            element: "addr"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vir"
                                            },
                                            element: "addr"
                                        },
                                        right: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'FunccallExpression',
                                                arguments: [{
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "r"
                                                    }
                                                }]
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "pclow"
                                                }
                                            }
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "rstate"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "dsu2"
                                        }
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dbgunit"
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "debug"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "debug"
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'EnumLiteral',
                            value: "dsu2"
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_exception"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "x"
                                    },
                                    element: "annul_all"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "xc_trap_address"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "pclow"
                                        }
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "f"
                                    },
                                    element: "pc"
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "dbgunit"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "pwrd2"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "/=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "smp"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "sidle"
                                        },
                                        right: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "and",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "and",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "rp"
                                                            },
                                                            element: "pwd"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "rp"
                                                            },
                                                            element: "error"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "ico"
                                                        },
                                                        element: "idle"
                                                    }
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dco"
                                                    },
                                                    element: "idle"
                                                }
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "dbgunit"
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "dbgi"
                                                        },
                                                        element: "reset"
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'IfStatement',
                                                        test: {
                                                            type: 'BinaryExpression',
                                                            operator: "/=",
                                                            left: {
                                                                type: 'Identifier',
                                                                phase: 'name',
                                                                value: "smp"
                                                            },
                                                            right: {
                                                                type: 'IntLiteral',
                                                                value: "0"
                                                            }
                                                        },
                                                        consequence: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "vp"
                                                                    },
                                                                    element: "pwd"
                                                                },
                                                                right: {
                                                                    type: 'UnaryExpression',
                                                                    operator: "not"
                                                                }
                                                            }]
                                                        },
                                                        alternate: {
                                                            type: 'BlockStatement',
                                                            body: [{
                                                                type: 'AssignmentExpressionVar',
                                                                left: {
                                                                    type: 'MemberExpression',
                                                                    object: {
                                                                        type: 'Identifier',
                                                                        phase: 'var',
                                                                        value: "vp"
                                                                    },
                                                                    element: "pwd"
                                                                },
                                                                right: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "vp"
                                                            },
                                                            element: "error"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'0'"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'IfStatement',
                                                test: {
                                                    type: 'BinaryExpression',
                                                    operator: "=",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "and",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbgi"
                                                            },
                                                            element: "dsuen"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "dbgi"
                                                            },
                                                            element: "dbreak"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'EnumLiteral',
                                                        value: "'1'"
                                                    }
                                                },
                                                consequence: {
                                                    type: 'BlockStatement',
                                                    body: [{
                                                        type: 'AssignmentExpressionVar',
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'MemberExpression',
                                                                object: {
                                                                    type: 'Identifier',
                                                                    phase: 'var',
                                                                    value: "v"
                                                                },
                                                                element: "x"
                                                            },
                                                            element: "debug"
                                                        },
                                                        right: {
                                                            type: 'EnumLiteral',
                                                            value: "'1'"
                                                        }
                                                    }]
                                                }
                                            }, {
                                                type: 'ProccallExpression',
                                                arguments: [{
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "r"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "dsur"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "ir"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "dbgi"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "wpr"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'var',
                                                                value: "v"
                                                            },
                                                            element: "w"
                                                        },
                                                        element: "s"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "vwpr"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "vdsu"
                                                        },
                                                        element: "asi"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_trap_address"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "vir"
                                                        },
                                                        element: "addr"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "vdsu"
                                                        },
                                                        element: "tbufcnt"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_wreg"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_waddr"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "xc_result"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "fpcdbgwr"
                                                    }
                                                }]
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "xc_halt"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "dbgi"
                                                    },
                                                    element: "halt"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "ipend"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vp"
                                                    },
                                                    element: "pwd"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "or",
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "or",
                                                    left: {
                                                        type: 'BinaryExpression',
                                                        operator: "or",
                                                        left: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "rp"
                                                            },
                                                            element: "error"
                                                        },
                                                        right: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "rp"
                                                            },
                                                            element: "pwd"
                                                        }
                                                    },
                                                    right: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "debug"
                                                    }
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "xc_halt"
                                                }
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "rstate"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "run"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "annul_all"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vp"
                                                    },
                                                    element: "error"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'SliceExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "xc_trap_address"
                                                    },
                                                    range: {
                                                        type: 'RangeExpression',
                                                        left: {
                                                            type: 'IntLiteral',
                                                            value: "31"
                                                        },
                                                        right: {
                                                            type: 'Identifier',
                                                            phase: 'name',
                                                            value: "pclow"
                                                        }
                                                    }
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "ir"
                                                    },
                                                    element: "addr"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "debug"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vir"
                                                    },
                                                    element: "pwd"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }]
                                        }
                                    }, {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "/=",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "smp"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            },
                                            right: {
                                                type: 'BinaryExpression',
                                                operator: "=",
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "irqi"
                                                    },
                                                    element: "rst"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vp"
                                                    },
                                                    element: "pwd"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "vp"
                                                    },
                                                    element: "error"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'SwitchCase',
                        tests: [{
                            type: 'Others'
                        }],
                        consequence: {
                            type: 'BlockStatement',
                            body: []
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "holdn"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "intack"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsur"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "vdsu"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_exception"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dbgi"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "rp"
                            },
                            element: "error"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_trap"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "tbufcntx"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "tbufi"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "vdsu"
                        },
                        element: "tbufcnt"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "tbufcntx"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "w"
                        },
                        element: "except"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_exception"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "w"
                        },
                        element: "result"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "xc_result"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "rstate"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsu2"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "except"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "w"
                        },
                        element: "wa"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "xc_waddr"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "w"
                        },
                        element: "wreg"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_wreg"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "holdn"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "wdata"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_result"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "waddr"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_waddr"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "wren"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "xc_wreg"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "holdn"
                                    }
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "irqo"
                        },
                        element: "intack"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "intack"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "holdn"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "irqo"
                        },
                        element: "irl"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "tt"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "3"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "irqo"
                        },
                        element: "pwd"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "rp"
                                },
                                element: "pwd"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "irqo"
                        },
                        element: "fpen"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "ef"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "irqo"
                        },
                        element: "idle"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "halt"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_halt"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "pwd"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "rp"
                                },
                                element: "pwd"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "idle"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "sidle"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "icnt"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "icnt"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "fcnt"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fcnt"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "optype"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "30"
                                        }
                                    }
                                },
                                right: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "ctrl"
                                        },
                                        element: "inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "24"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "21"
                                        }
                                    }
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "intack"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "intack"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "holdn"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_rstn"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "except"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "et"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "svt"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "dwt"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "ef"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "/=",
                                left: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'const',
                                        value: "need_extra_sync_reset"
                                    },
                                    indexes: [{
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fabtech"
                                    }]
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "cwp"
                                    },
                                    right: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "icc"
                                    },
                                    right: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "dbp"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dynrst"
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tba"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "irqi"
                                        },
                                        element: "rstvec"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tba"
                                    },
                                    right: {
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "rstaddr"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'IntLiteral',
                                                value: "20"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "annul_all"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "rstate"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "run"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vir"
                                },
                                element: "pwd"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vp"
                                },
                                element: "pwd"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "debug"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "nerror"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "svt"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "w"
                                            },
                                            element: "s"
                                        },
                                        element: "tt"
                                    },
                                    right: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dbgunit"
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "dsuen"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "dbgi"
                                                },
                                                element: "dbreak"
                                            }
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "rstate"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "dsu1"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "debug"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "/=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "smp"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "irqi"
                                            },
                                            element: "run"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rstn"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "rstate"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "dsu1"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vp"
                                        },
                                        element: "pwd"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'UnaryExpression',
                        operator: "not"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "ef"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'UnaryExpression',
                        operator: "not"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "ec"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "ctrl"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "ctrl"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "dci"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "dci"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "ctrl"
                        },
                        element: "rett"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "rett"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "mac"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "mac"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "laddr"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "result"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "1"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "ctrl"
                        },
                        element: "annul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "annul_all"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casaen"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "casa"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'StringLiteral',
                                value: "00"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "4"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "asr18"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "y"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_asr18"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_icc"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "wpr"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "holdn"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "trap"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_iflush"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_nullify"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "werr"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "tt"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "me_newtt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "ctrl"
                        },
                        element: "tt"
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ir"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "irqi"
                            },
                            element: "irl"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "pv"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "trap"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_newtt"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_nullify"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "irqen"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "irqen2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_nullify2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "trap"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "ipend"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ctrl"
                            },
                            element: "tt"
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "ld"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'LoopStatement',
                            param: {
                                type: 'LoopParam',
                                name: "i",
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "dsets"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    }
                                }
                            },
                            block: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "i"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dco"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "i"
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "set"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "set"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dsetmsb"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "mds"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'0'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_size"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "dci"
                                        },
                                        element: "size"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_laddr"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "laddr"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_signed"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "dci"
                                        },
                                        element: "signed"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_size"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "dci"
                                        },
                                        element: "size"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_laddr"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "laddr"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "me_signed"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "dci"
                                        },
                                        element: "signed"
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "/=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "lddel"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    },
                                    right: {
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "data"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "x"
                                                },
                                                element: "set"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "me_size"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "me_laddr"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "me_signed"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "mexc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dco"
                        },
                        element: "mexc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "x"
                        },
                        element: "icc"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "me_icc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "ctrl"
                        },
                        element: "wicc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "macen"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "annul"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "trap"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "asr18"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_asr18"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "x"
                            },
                            element: "rstate"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsu2"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_nullify2"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "set"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "set"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dsetmsb"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "maddress"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "result"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "enaddr"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "enaddr"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "asi"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "asi"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "size"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "size"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "lock"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "dci"
                                    },
                                    element: "lock"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "read"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "read"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "write"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "write"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "flush"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_iflush"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "flushl"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "dsuen"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "dsuen"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "msu"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "m"
                                },
                                element: "su"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "esu"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "su"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "ipend"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "ipend"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "m"
                        },
                        element: "ctrl"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "ctrl"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_op1"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "op1"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_op2"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "op2"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "rett"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "rett"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "wreg"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wreg"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_ymsb"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "ymsb"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "mul_op2"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_op2"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_shcnt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "shcnt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "cwp"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "a"
                        },
                        element: "cwp"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_sari"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "sari"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "m"
                        },
                        element: "su"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "su"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "multype"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "3"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "mul"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "mul"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "mul"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "lddel"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ldbp1"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_op1"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_sari"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'IndexExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "x"
                                                        },
                                                        element: "data"
                                                    },
                                                    indexes: [{
                                                        type: 'IntLiteral',
                                                        value: "0"
                                                    }]
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "31"
                                                }]
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "e"
                                                        },
                                                        element: "ctrl"
                                                    },
                                                    element: "inst"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "19"
                                                }]
                                            }
                                        },
                                        right: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "r"
                                                        },
                                                        element: "e"
                                                    },
                                                    element: "ctrl"
                                                },
                                                element: "inst"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "20"
                                            }]
                                        }
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ldbp2"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_op2"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_ymsb"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "data"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "0"
                                            }]
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "0"
                                        }]
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "mul_op2"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_op2"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_shcnt"
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'IndexExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "x"
                                                },
                                                element: "data"
                                            },
                                            indexes: [{
                                                type: 'IntLiteral',
                                                value: "0"
                                            }]
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "4"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }, {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "e"
                                            },
                                            element: "invop2"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ex_op2"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ex_shcnt"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_add_res"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "+",
                        left: {
                            type: 'BinaryExpression',
                            operator: "&",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_op1"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "&",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_op2"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "alucin"
                            }
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "ex_add_res"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "2"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            }
                        },
                        right: {
                            type: 'StringLiteral',
                            value: "00"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "nalign"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "nalign"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "v"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_dci"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_link_pc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_jump"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_force_a2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_load"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "casa"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_jump_address"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "ex_add_res"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "32"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "+",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "pclow"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            }
                        }
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "y"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_ymsb"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_logic_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "y"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "ex_shift_res"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "r"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_op1"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_op2"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_shcnt"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_sari"
                            }
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "wpr"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_df_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "y"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_misc_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_edata"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'IndexExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "ex_add_res"
                        },
                        indexes: [{
                            type: 'IntLiteral',
                            value: "3"
                        }]
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'IndexExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "ex_add_res"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "3"
                            }]
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_force_a2"
                        }
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_add_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_shift_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_logic_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_misc_res"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "me_icc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "icc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "divz"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "casaz"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "holdn"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dbgi"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dsur"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_dci"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_result2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "dci"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_edata"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_result2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "fpo"
                            },
                            element: "data"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_edata2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "result"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "wcwp"
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casaen"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "cnt"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "10"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "casa"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_nullify2"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "nullify"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_nullify2"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "annul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        },
                        right: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "annul_all"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "ctrl"
                        },
                        element: "wicc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "m"
                        },
                        element: "mac"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "e"
                        },
                        element: "mac"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dbgunit"
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "rstate"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsu2"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "ld"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "eenaddr"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                },
                                element: "enaddr"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "eaddress"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "ex_add_res"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dci"
                        },
                        element: "edata"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ex_edata2"
                            }
                        }]
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "m"
                            },
                            element: "icc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_bpmiss"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_bpannul"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "ctrl"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "a"
                        },
                        element: "ctrl"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "jmpl"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "jmpl"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ctrl"
                        },
                        element: "annul"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'BinaryExpression',
                            operator: "or",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "ra_bpannul"
                            }
                        },
                        right: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "annul_all"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ctrl"
                        },
                        element: "rett"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "rett"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ctrl"
                        },
                        element: "wreg"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wreg"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "su"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "a"
                        },
                        element: "su"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "et"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "a"
                        },
                        element: "et"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ctrl"
                        },
                        element: "wicc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "wpr"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "dbgi"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "trap"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "e"
                                },
                                element: "ctrl"
                            },
                            element: "tt"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "rfo"
                            },
                            element: "data1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_df_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "zero32"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "rsel1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ldbp1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "rfo"
                            },
                            element: "data2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_df_result"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "imm"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "rsel2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_ldbp2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "m"
                            },
                            element: "icc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "y"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "0"
                            }]
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_ldbp2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "op1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "op2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "aluop"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "alusel"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "aluadd"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "shcnt"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "sari"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "shleft"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ymsb"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "mul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_div"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "mulstep"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "mac"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "ldbp2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "invop2"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'IndexExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "m"
                                },
                                element: "icc"
                            },
                            indexes: [{
                                type: 'IntLiteral',
                                value: "0"
                            }]
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "alucin"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_bpmiss"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_bpannul"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "e"
                        },
                        element: "bp"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "a"
                            },
                            element: "bp"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: ">",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "isets"
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inst"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'FunccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "set"
                                        }
                                    }]
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inst"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "0"
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_icc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "m"
                        },
                        element: "icc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "cwp"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "cwp"
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "ps"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "s"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "et"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "su"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "et"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wy"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "w"
                                },
                                element: "s"
                            },
                            element: "wim"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_cwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "wovf"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "wunf"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_wcwp"
                        }
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casaen"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "de_inst"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "30"
                                        }
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ldst"
                                }
                            }
                        },
                        right: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "de_inst"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "24"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "19"
                                    }
                                }
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "casa"
                            }
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'SwitchStatement',
                            discriminant: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            },
                            cases: [{
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'StringLiteral',
                                    value: "00"
                                }, {
                                    type: 'StringLiteral',
                                    value: "01"
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "de_inst"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'IntLiteral',
                                                    value: "4"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        },
                                        right: {
                                            type: 'StringLiteral',
                                            value: "00000"
                                        }
                                    }]
                                }
                            }, {
                                type: 'SwitchCase',
                                tests: [{
                                    type: 'Others'
                                }],
                                consequence: {
                                    type: 'BlockStatement',
                                    body: []
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rs1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rs1mod"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_rs2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "de_inst"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "4"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_raddr1"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_raddr2"
                    },
                    right: {
                        type: 'Aggregate',
                        entries: [{
                            type: 'AggregateEntry',
                            tags: [{
                                type: 'Others'
                            }],
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rs1opt"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_rs1mod"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'ProccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "cwp"
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'BinaryExpression',
                                            operator: "&",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "de_inst"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "29"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "26"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "a"
                                                    },
                                                    element: "rs1"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }]
                                            }
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "de_raddr1"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "-",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "rfbits"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "1"
                                                    }
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        }
                                    }]
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'ProccallExpression',
                                    arguments: [{
                                        type: 'Association',
                                        value: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "cwp"
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'BinaryExpression',
                                            operator: "&",
                                            left: {
                                                type: 'SliceExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "de_inst"
                                                },
                                                range: {
                                                    type: 'RangeExpression',
                                                    left: {
                                                        type: 'IntLiteral',
                                                        value: "18"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "15"
                                                    }
                                                }
                                            },
                                            right: {
                                                type: 'IndexExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "a"
                                                    },
                                                    element: "rs1"
                                                },
                                                indexes: [{
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }]
                                            }
                                        }
                                    }, {
                                        type: 'Association',
                                        value: {
                                            type: 'SliceExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "de_raddr1"
                                            },
                                            range: {
                                                type: 'RangeExpression',
                                                left: {
                                                    type: 'BinaryExpression',
                                                    operator: "-",
                                                    left: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "rfbits"
                                                    },
                                                    right: {
                                                        type: 'IntLiteral',
                                                        value: "1"
                                                    }
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "0"
                                                }
                                            }
                                        }
                                    }]
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'ProccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "cwp"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "a"
                                    },
                                    element: "rs1"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "de_raddr1"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "-",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "rfbits"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "1"
                                            }
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "0"
                                        }
                                    }
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "r"
                                },
                                element: "d"
                            },
                            element: "cwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rs2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "de_raddr2"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "-",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "rfbits"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    }
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            }
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "rfa1"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "de_raddr1"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "rfa2"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "de_raddr2"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'BinaryExpression',
                                operator: "-",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rfbits"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "1"
                                }
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wreg"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "ld"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rd"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_cwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rd"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "rd"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "fpo"
                            },
                            element: "cc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_fbranch"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "cpo"
                            },
                            element: "cc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_cbranch"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "imm"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "r"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inst"
                            }
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rs2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rd"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfa1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfa2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "rd"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "fpo"
                            },
                            element: "ldlock"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "e"
                            },
                            element: "mul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_div"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_wcwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldcheck1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldcheck2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_ldlock"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkra"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkex"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "bp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "nobp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_fins_hold"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inst"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "x"
                            },
                            element: "annul_all"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_ldlock"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'FunccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_icc"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_inst"
                                }
                            }]
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_fbranch"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_cbranch"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "fpo"
                            },
                            element: "ccv"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "cpo"
                            },
                            element: "ccv"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "d"
                            },
                            element: "cnt"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "d"
                            },
                            element: "pc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_branch"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "d"
                            },
                            element: "annul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "jmpl"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_inull"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "d"
                            },
                            element: "pv"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "pv"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_hold_pc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ticc"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "rett"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "mulstart"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "divstart"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_bpmiss"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_bpmiss"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "bp"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "bp"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "nobp"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "nobp"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "v"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "annul"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_wcwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_cwp"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "d"
                            },
                            element: "cwp"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "d"
                        },
                        element: "inull"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "r"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "v"
                            }
                        }]
                    }
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkra"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkex"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rs1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfa1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'EnumLiteral',
                            value: "false"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfe1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rsel1"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldcheck1"
                        }
                    }]
                }, {
                    type: 'ProccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "r"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkra"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldchkex"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "de_rs2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfa2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'FunccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_inst"
                                }
                            }]
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rfe2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "rsel2"
                        }
                    }, {
                        type: 'Association',
                        value: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ldcheck2"
                        }
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_branch_address"
                    },
                    right: {
                        type: 'FunccallExpression',
                        arguments: [{
                            type: 'Association',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inst"
                            }
                        }, {
                            type: 'Association',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pc"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "wicc"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wicc"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "wreg"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wreg"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "rett"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "rett"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "wy"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "and",
                        left: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "ctrl"
                            },
                            element: "wy"
                        },
                        right: {
                            type: 'UnaryExpression',
                            operator: "not"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "trap"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "mexc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "tt"
                    },
                    right: {
                        type: 'StringLiteral',
                        value: "000000"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "inst"
                    },
                    right: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "de_inst"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "pc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "pc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "v"
                                },
                                element: "a"
                            },
                            element: "ctrl"
                        },
                        element: "cnt"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "cnt"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "a"
                        },
                        element: "step"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "d"
                        },
                        element: "step"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "holdn"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "de_raddr1"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rfbits"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "rfa1"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "de_raddr2"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rfbits"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "rfa2"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_ren1"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "rfe1"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_ren2"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "rfe2"
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_ren1"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "rfe1"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_ren2"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "rfe2"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dbgi"
                                            },
                                            element: "denable"
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "rstate"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dsu2"
                                    }
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "de_raddr1"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "-",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "rfbits"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dbgi"
                                            },
                                            element: "daddr"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'BinaryExpression',
                                                operator: "+",
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "rfbits"
                                                },
                                                right: {
                                                    type: 'IntLiteral',
                                                    value: "1"
                                                }
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "2"
                                            }
                                        }
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "de_ren1"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "d"
                                },
                                element: "step"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "step"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "raddr1"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_raddr1"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "raddr2"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_raddr2"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "ren1"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_ren1"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "ren2"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_ren2"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "rfi"
                        },
                        element: "diag"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "testen"
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "000"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "inull"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inull"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "flush"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "me_iflush"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "v"
                            },
                            element: "d"
                        },
                        element: "divrdy"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divo"
                        },
                        element: "nready"
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "flushl"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "pnull"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "fline"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "bpmiss"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "bpmiss"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "holdn"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_rstn"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "/=",
                                left: {
                                    type: 'IndexExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'const',
                                        value: "need_extra_sync_reset"
                                    },
                                    indexes: [{
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "fabtech"
                                    }]
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "0"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "d"
                                        },
                                        element: "cwp"
                                    },
                                    right: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "bpmiss"
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "or",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_bpmiss"
                        },
                        right: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_bpmiss"
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "npc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "f"
                        },
                        element: "pc"
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fe_pc"
                    },
                    right: {
                        type: 'MemberExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "r"
                            },
                            element: "f"
                        },
                        element: "pc"
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ra_bpmiss"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fe_pc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pc"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "ex_bpmiss"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fe_pc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "pc"
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fe_npc"
                    },
                    right: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'const',
                            value: "zero32"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "pclow"
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionVar',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'var',
                            value: "fe_npc"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "2"
                            }
                        }
                    },
                    right: {
                        type: 'BinaryExpression',
                        operator: "+",
                        left: {
                            type: 'SliceExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'var',
                                value: "fe_pc"
                            },
                            range: {
                                type: 'RangeExpression',
                                left: {
                                    type: 'IntLiteral',
                                    value: "31"
                                },
                                right: {
                                    type: 'IntLiteral',
                                    value: "2"
                                }
                            }
                        },
                        right: {
                            type: 'IntLiteral',
                            value: "1"
                        }
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "xc_rstn"
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "f"
                                },
                                element: "pc"
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "f"
                                },
                                element: "branch"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dynrst"
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "f"
                                            },
                                            element: "pc"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "31"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "12"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "irqi"
                                        },
                                        element: "rstvec"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "f"
                                            },
                                            element: "pc"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "31"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "12"
                                            }
                                        }
                                    },
                                    right: {
                                        type: 'FunccallExpression',
                                        arguments: [{
                                            type: 'Association',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "rstaddr"
                                            }
                                        }, {
                                            type: 'Association',
                                            value: {
                                                type: 'IntLiteral',
                                                value: "20"
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_exception"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "f"
                                    },
                                    element: "branch"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "f"
                                    },
                                    element: "pc"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "xc_trap_address"
                                }
                            }, {
                                type: 'AssignmentExpressionVar',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "npc"
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "v"
                                        },
                                        element: "f"
                                    },
                                    element: "pc"
                                }
                            }]
                        },
                        alternate: {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_hold_pc"
                                },
                                right: {
                                    type: 'EnumLiteral',
                                    value: "'1'"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "f"
                                        },
                                        element: "pc"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "f"
                                        },
                                        element: "pc"
                                    }
                                }, {
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "v"
                                            },
                                            element: "f"
                                        },
                                        element: "branch"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "f"
                                        },
                                        element: "branch"
                                    }
                                }, {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "bpmiss"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "fe_npc"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "branch"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "npc"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'IfStatement',
                                        test: {
                                            type: 'BinaryExpression',
                                            operator: "=",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "ex_jump"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        },
                                        consequence: {
                                            type: 'BlockStatement',
                                            body: [{
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "f"
                                                    },
                                                    element: "pc"
                                                },
                                                right: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "ex_jump_address"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "f"
                                                    },
                                                    element: "branch"
                                                },
                                                right: {
                                                    type: 'EnumLiteral',
                                                    value: "'1'"
                                                }
                                            }, {
                                                type: 'AssignmentExpressionVar',
                                                left: {
                                                    type: 'Identifier',
                                                    phase: 'name',
                                                    value: "npc"
                                                },
                                                right: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'var',
                                                            value: "v"
                                                        },
                                                        element: "f"
                                                    },
                                                    element: "pc"
                                                }
                                            }]
                                        }
                                    }
                                }]
                            },
                            alternate: {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "and",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ex_jump"
                                        },
                                        right: {
                                            type: 'UnaryExpression',
                                            operator: "not"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "f"
                                            },
                                            element: "pc"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "ex_jump_address"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "f"
                                            },
                                            element: "branch"
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }, {
                                        type: 'AssignmentExpressionVar',
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "npc"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "f"
                                            },
                                            element: "pc"
                                        }
                                    }]
                                },
                                alternate: {
                                    type: 'IfStatement',
                                    test: {
                                        type: 'BinaryExpression',
                                        operator: "=",
                                        left: {
                                            type: 'BinaryExpression',
                                            operator: "and",
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "de_branch"
                                            },
                                            right: {
                                                type: 'UnaryExpression',
                                                operator: "not"
                                            }
                                        },
                                        right: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    },
                                    consequence: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            },
                                            right: {
                                                type: 'FunccallExpression',
                                                arguments: [{
                                                    type: 'Association',
                                                    value: {
                                                        type: 'Identifier',
                                                        phase: 'name',
                                                        value: "de_inst"
                                                    }
                                                }, {
                                                    type: 'Association',
                                                    value: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'MemberExpression',
                                                            object: {
                                                                type: 'Identifier',
                                                                phase: 'sig',
                                                                value: "r"
                                                            },
                                                            element: "d"
                                                        },
                                                        element: "pc"
                                                    }
                                                }]
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "branch"
                                            },
                                            right: {
                                                type: 'EnumLiteral',
                                                value: "'1'"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "npc"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            }
                                        }]
                                    },
                                    alternate: {
                                        type: 'BlockStatement',
                                        body: [{
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "branch"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "bpmiss"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            },
                                            right: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "fe_npc"
                                            }
                                        }, {
                                            type: 'AssignmentExpressionVar',
                                            left: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "npc"
                                            },
                                            right: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'var',
                                                        value: "v"
                                                    },
                                                    element: "f"
                                                },
                                                element: "pc"
                                            }
                                        }]
                                    }
                                }
                            }
                        }
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "dpc"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "00"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "fpc"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "f"
                                        },
                                        element: "pc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "00"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "rpc"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'SliceExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "npc"
                                    },
                                    range: {
                                        type: 'RangeExpression',
                                        left: {
                                            type: 'IntLiteral',
                                            value: "31"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "2"
                                        }
                                    }
                                },
                                right: {
                                    type: 'StringLiteral',
                                    value: "00"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "fbranch"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "f"
                                },
                                element: "branch"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "rbranch"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "f"
                                },
                                element: "branch"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "su"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "a"
                                },
                                element: "su"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "fline"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "ici"
                        },
                        element: "flushl"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "ico"
                                },
                                element: "mds"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_hold_pc"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'0'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'LoopStatement',
                            param: {
                                type: 'LoopParam',
                                name: "i",
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    },
                                    right: {
                                        type: 'BinaryExpression',
                                        operator: "-",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "isets"
                                        },
                                        right: {
                                            type: 'IntLiteral',
                                            value: "1"
                                        }
                                    }
                                }
                            },
                            block: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "d"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "i"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "ico"
                                            },
                                            element: "data"
                                        },
                                        indexes: [{
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "i"
                                        }]
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "d"
                                },
                                element: "set"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "ico"
                                    },
                                    element: "set"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "isetmsb"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "d"
                                },
                                element: "mexc"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "ico"
                                },
                                element: "mexc"
                            }
                        }]
                    }
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'ProccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dbgi"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "r"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsur"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ir"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "wpr"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dco"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "tbo"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "diagdata"
                                }
                            }]
                        }, {
                            type: 'ProccallExpression',
                            arguments: [{
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "denable"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsur"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "dci"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dco"
                                    },
                                    element: "mds"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ico"
                                }
                            }, {
                                type: 'Association',
                                value: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vdsu"
                                    },
                                    element: "crdy"
                                }
                            }]
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rin"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "v"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "wprin"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "vwpr"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dsuin"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "vdsu"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "irin"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "vir"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "start"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "mulstart"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "signed"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "19"
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "op1"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "ex_op1"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "19"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ex_op1"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "op2"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "mul_op2"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "19"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "mul_op2"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "mac"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "24"
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "macpipe"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "muli"
                                    },
                                    element: "acc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "39"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    }
                                }
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "w"
                                                },
                                                element: "s"
                                            },
                                            element: "y"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "7"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }]
                            }]
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "muli"
                                    },
                                    element: "acc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "39"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "32"
                                    }
                                }
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'SliceExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "y"
                                        },
                                        range: {
                                            type: 'RangeExpression',
                                            left: {
                                                type: 'IntLiteral',
                                                value: "7"
                                            },
                                            right: {
                                                type: 'IntLiteral',
                                                value: "0"
                                            }
                                        }
                                    }
                                }]
                            }]
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'SliceExpression',
                        object: {
                            type: 'MemberExpression',
                            object: {
                                type: 'Identifier',
                                phase: 'sig',
                                value: "muli"
                            },
                            element: "acc"
                        },
                        range: {
                            type: 'RangeExpression',
                            left: {
                                type: 'IntLiteral',
                                value: "31"
                            },
                            right: {
                                type: 'IntLiteral',
                                value: "0"
                            }
                        }
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "asr18"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "muli"
                        },
                        element: "flush"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "annul_all"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "start"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "divstart"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "signed"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "19"
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "flush"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "x"
                                },
                                element: "annul_all"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "op1"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "ex_op1"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "19"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ex_op1"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "op2"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "ex_op2"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "19"
                                        }]
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "ex_op2"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        operator: "=",
                        left: {
                            type: 'BinaryExpression',
                            operator: "and",
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "divstart"
                            },
                            right: {
                                type: 'UnaryExpression',
                                operator: "not"
                            }
                        },
                        right: {
                            type: 'EnumLiteral',
                            value: "'1'"
                        }
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsign"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "19"
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "dsign"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "inst"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "19"
                                }]
                            }
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "divi"
                        },
                        element: "y"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "&",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "m"
                                            },
                                            element: "y"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "31"
                                        }]
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "dsign"
                                    }
                                },
                                right: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "y"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "rpin"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "vp"
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "dbgunit"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "dsu"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'1'"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "dsumode"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "debug"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "crdy"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dsur"
                                            },
                                            element: "crdy"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "2"
                                        }]
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "data"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "diagdata"
                                    }
                                }]
                            }]
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "tracebuf"
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "tbi"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'Identifier',
                                                phase: 'name',
                                                value: "tbufi"
                                            }
                                        }]
                                    }]
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "tbi"
                                        },
                                        element: "addr"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'Aggregate',
                                                entries: [{
                                                    type: 'AggregateEntry',
                                                    tags: [{
                                                        type: 'Others'
                                                    }],
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }, {
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "tbi"
                                        },
                                        element: "data"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'Aggregate',
                                                entries: [{
                                                    type: 'AggregateEntry',
                                                    tags: [{
                                                        type: 'Others'
                                                    }],
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }, {
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "tbi"
                                        },
                                        element: "enable"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }]
                                }, {
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "tbi"
                                        },
                                        element: "write"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'Aggregate',
                                                entries: [{
                                                    type: 'AggregateEntry',
                                                    tags: [{
                                                        type: 'Others'
                                                    }],
                                                    value: {
                                                        type: 'EnumLiteral',
                                                        value: "'0'"
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }, {
                                    type: 'AssignmentExpressionSig',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "tbi"
                                        },
                                        element: "diag"
                                    },
                                    right: [{
                                        type: 'Waveform',
                                        list: [{
                                            type: 'WaveformElem',
                                            value: {
                                                type: 'StringLiteral',
                                                value: "0000"
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }]
                    },
                    alternate: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "dsu"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "data"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "crdy"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgo"
                                },
                                element: "dsumode"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "tbi"
                                },
                                element: "addr"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "tbi"
                                },
                                element: "data"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "tbi"
                                },
                                element: "enable"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "tbi"
                                },
                                element: "write"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Aggregate',
                                        entries: [{
                                            type: 'AggregateEntry',
                                            tags: [{
                                                type: 'Others'
                                            }],
                                            value: {
                                                type: 'EnumLiteral',
                                                value: "'0'"
                                            }
                                        }]
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "tbi"
                                },
                                element: "diag"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'StringLiteral',
                                        value: "0000"
                                    }
                                }]
                            }]
                        }]
                    }
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "error"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'BinaryExpression',
                                operator: "and",
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dummy"
                                },
                                right: {
                                    type: 'UnaryExpression',
                                    operator: "not"
                                }
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "wbhold"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "su"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "w"
                                    },
                                    element: "s"
                                },
                                element: "s"
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "istat"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'AssignmentExpressionSig',
                    left: {
                        type: 'MemberExpression',
                        object: {
                            type: 'Identifier',
                            phase: 'sig',
                            value: "dbgo"
                        },
                        element: "dstat"
                    },
                    right: [{
                        type: 'Waveform',
                        list: [{
                            type: 'WaveformElem',
                            value: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }, {
                                    type: 'AggregateEntry',
                                    tags: [],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }]
                    }]
                }, {
                    type: 'IfStatement',
                    test: {
                        type: 'Identifier',
                        phase: 'name',
                        value: "fpen"
                    },
                    consequence: {
                        type: 'BlockStatement',
                        body: [{
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vfpi"
                                },
                                element: "flush"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "v"
                                    },
                                    element: "x"
                                },
                                element: "annul_all"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vfpi"
                                },
                                element: "exack"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_fpexack"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vfpi"
                                },
                                element: "a_rs1"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "a"
                                },
                                element: "rs1"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "d"
                                },
                                element: "inst"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "de_inst"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "d"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'BinaryExpression',
                                    operator: "or",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'var',
                                                    value: "v"
                                                },
                                                element: "x"
                                            },
                                            element: "annul_all"
                                        },
                                        right: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "de_bpannul"
                                        }
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "d"
                                        },
                                        element: "annul"
                                    }
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "de_fins_hold"
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "d"
                                },
                                element: "trap"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "mexc"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "d"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "d"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "d"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "d"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "r"
                                    },
                                    element: "d"
                                },
                                element: "pv"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "a"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "a"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "a"
                                },
                                element: "inst"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "a"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "a"
                                },
                                element: "trap"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "trap"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "a"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'BinaryExpression',
                                operator: "or",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "a"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "annul"
                                },
                                right: {
                                    type: 'BinaryExpression',
                                    operator: "and",
                                    left: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "ex_bpmiss"
                                    },
                                    right: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'Identifier',
                                                        phase: 'sig',
                                                        value: "r"
                                                    },
                                                    element: "e"
                                                },
                                                element: "ctrl"
                                            },
                                            element: "inst"
                                        },
                                        indexes: [{
                                            type: 'IntLiteral',
                                            value: "29"
                                        }]
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "a"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "a"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "e"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "e"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "e"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "e"
                                },
                                element: "inst"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "e"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "e"
                                },
                                element: "trap"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "trap"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "e"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "annul"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "e"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "e"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "m"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "m"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "m"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "m"
                                },
                                element: "inst"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "m"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "m"
                                },
                                element: "trap"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "trap"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "m"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "annul"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "m"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "x"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "1"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                }
                            },
                            right: {
                                type: 'Aggregate',
                                entries: [{
                                    type: 'AggregateEntry',
                                    tags: [{
                                        type: 'Others'
                                    }],
                                    value: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'var',
                                            value: "vfpi"
                                        },
                                        element: "x"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "x"
                                        },
                                        element: "ctrl"
                                    },
                                    element: "pc"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "31"
                                    },
                                    right: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "pclow"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "x"
                                },
                                element: "inst"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "inst"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "x"
                                },
                                element: "cnt"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "cnt"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "x"
                                },
                                element: "trap"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_trap"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "x"
                                },
                                element: "annul"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "annul"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "x"
                                },
                                element: "pv"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ctrl"
                                },
                                element: "pv"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'var',
                                    value: "vfpi"
                                },
                                element: "lddata"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "xc_df_result"
                            }
                        }, {
                            type: 'IfStatement',
                            test: {
                                type: 'BinaryExpression',
                                operator: "=",
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "rstate"
                                },
                                right: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "dsu2"
                                }
                            },
                            consequence: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vfpi"
                                            },
                                            element: "dbg"
                                        },
                                        element: "enable"
                                    },
                                    right: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "dbgi"
                                        },
                                        element: "denable"
                                    }
                                }]
                            },
                            alternate: {
                                type: 'BlockStatement',
                                body: [{
                                    type: 'AssignmentExpressionVar',
                                    left: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'var',
                                                value: "vfpi"
                                            },
                                            element: "dbg"
                                        },
                                        element: "enable"
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "dbg"
                                },
                                element: "write"
                            },
                            right: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpcdbgwr"
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "dbg"
                                },
                                element: "fsr"
                            },
                            right: {
                                type: 'IndexExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "daddr"
                                },
                                indexes: [{
                                    type: 'IntLiteral',
                                    value: "22"
                                }]
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "dbg"
                                },
                                element: "addr"
                            },
                            right: {
                                type: 'SliceExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "dbgi"
                                    },
                                    element: "daddr"
                                },
                                range: {
                                    type: 'RangeExpression',
                                    left: {
                                        type: 'IntLiteral',
                                        value: "6"
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "2"
                                    }
                                }
                            }
                        }, {
                            type: 'AssignmentExpressionVar',
                            left: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'var',
                                        value: "vfpi"
                                    },
                                    element: "dbg"
                                },
                                element: "data"
                            },
                            right: {
                                type: 'MemberExpression',
                                object: {
                                    type: 'Identifier',
                                    phase: 'sig',
                                    value: "dbgi"
                                },
                                element: "ddata"
                            }
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "fpi"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "vfpi"
                                    }
                                }]
                            }]
                        }, {
                            type: 'AssignmentExpressionSig',
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "cpi"
                            },
                            right: [{
                                type: 'Waveform',
                                list: [{
                                    type: 'WaveformElem',
                                    value: {
                                        type: 'Identifier',
                                        phase: 'name',
                                        value: "vfpi"
                                    }
                                }]
                            }]
                        }]
                    }
                }]
            };
            this.elaborate = function() {}
    }

    /* process process preg(arch rtl of iu3) */

    function _t_(_p, _n, _g, _port) {
        hdl.obj(this, _p, _n);
        this._seq = {
            type: 'BlockStatement',
            body: [{
                type: 'IfStatement',
                test: {
                    type: 'FunccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "sclk"
                        }
                    }]
                },
                consequence: {
                    type: 'BlockStatement',
                    body: [{
                        type: 'AssignmentExpressionSig',
                        left: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "rp"
                        },
                        right: [{
                            type: 'Waveform',
                            list: [{
                                type: 'WaveformElem',
                                value: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "rpin"
                                }
                            }]
                        }]
                    }, {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rstn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'Identifier',
                                        phase: 'sig',
                                        value: "rp"
                                    },
                                    element: "error"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'0'"
                                        }
                                    }]
                                }]
                            }]
                        }
                    }]
                }
            }]
        };
        this.elaborate = function() {}
    }

    /* process process reg(arch rtl of iu3) */

    function _t_(_p, _n, _g, _port) {
        hdl.obj(this, _p, _n);
        this._seq = {
            type: 'BlockStatement',
            body: [{
                type: 'IfStatement',
                test: {
                    type: 'FunccallExpression',
                    arguments: [{
                        type: 'Association',
                        value: {
                            type: 'Identifier',
                            phase: 'name',
                            value: "clk"
                        }
                    }]
                },
                consequence: {
                    type: 'BlockStatement',
                    body: [{
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "holdn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'1'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'Identifier',
                                    phase: 'name',
                                    value: "r"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "rin"
                                        }
                                    }]
                                }]
                            }]
                        },
                        alternate: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "x"
                                    },
                                    element: "ipend"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "rin"
                                                },
                                                element: "x"
                                            },
                                            element: "ipend"
                                        }
                                    }]
                                }]
                            }, {
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'sig',
                                            value: "r"
                                        },
                                        element: "m"
                                    },
                                    element: "werr"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "rin"
                                                },
                                                element: "m"
                                            },
                                            element: "werr"
                                        }
                                    }]
                                }]
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "holdn"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "ico"
                                            },
                                            element: "mds"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "inst"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "inst"
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "mexc"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "mexc"
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "set"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "d"
                                                    },
                                                    element: "set"
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "=",
                                    left: {
                                        type: 'BinaryExpression',
                                        operator: "or",
                                        left: {
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "holdn"
                                        },
                                        right: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "dco"
                                            },
                                            element: "mds"
                                        }
                                    },
                                    right: {
                                        type: 'EnumLiteral',
                                        value: "'0'"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "data"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "data"
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "mexc"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "mexc"
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "set"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'MemberExpression',
                                                    object: {
                                                        type: 'MemberExpression',
                                                        object: {
                                                            type: 'Identifier',
                                                            phase: 'sig',
                                                            value: "rin"
                                                        },
                                                        element: "x"
                                                    },
                                                    element: "set"
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }]
                        }
                    }, {
                        type: 'IfStatement',
                        test: {
                            type: 'BinaryExpression',
                            operator: "=",
                            left: {
                                type: 'Identifier',
                                phase: 'name',
                                value: "rstn"
                            },
                            right: {
                                type: 'EnumLiteral',
                                value: "'0'"
                            }
                        },
                        consequence: {
                            type: 'BlockStatement',
                            body: [{
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "s"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }]
                            }, {
                                type: 'AssignmentExpressionSig',
                                left: {
                                    type: 'MemberExpression',
                                    object: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'Identifier',
                                                phase: 'sig',
                                                value: "r"
                                            },
                                            element: "w"
                                        },
                                        element: "s"
                                    },
                                    element: "ps"
                                },
                                right: [{
                                    type: 'Waveform',
                                    list: [{
                                        type: 'WaveformElem',
                                        value: {
                                            type: 'EnumLiteral',
                                            value: "'1'"
                                        }
                                    }]
                                }]
                            }, {
                                type: 'IfStatement',
                                test: {
                                    type: 'BinaryExpression',
                                    operator: "/=",
                                    left: {
                                        type: 'IndexExpression',
                                        object: {
                                            type: 'Identifier',
                                            phase: 'const',
                                            value: "need_extra_sync_reset"
                                        },
                                        indexes: [{
                                            type: 'Identifier',
                                            phase: 'name',
                                            value: "fabtech"
                                        }]
                                    },
                                    right: {
                                        type: 'IntLiteral',
                                        value: "0"
                                    }
                                },
                                consequence: {
                                    type: 'BlockStatement',
                                    body: [{
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "d"
                                            },
                                            element: "inst"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'Aggregate',
                                                    entries: [{
                                                        type: 'AggregateEntry',
                                                        tags: [{
                                                            type: 'Others'
                                                        }],
                                                        value: {
                                                            type: 'Aggregate',
                                                            entries: [{
                                                                type: 'AggregateEntry',
                                                                tags: [{
                                                                    type: 'Others'
                                                                }],
                                                                value: {
                                                                    type: 'EnumLiteral',
                                                                    value: "'0'"
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }]
                                    }, {
                                        type: 'AssignmentExpressionSig',
                                        left: {
                                            type: 'MemberExpression',
                                            object: {
                                                type: 'MemberExpression',
                                                object: {
                                                    type: 'Identifier',
                                                    phase: 'sig',
                                                    value: "r"
                                                },
                                                element: "x"
                                            },
                                            element: "mexc"
                                        },
                                        right: [{
                                            type: 'Waveform',
                                            list: [{
                                                type: 'WaveformElem',
                                                value: {
                                                    type: 'EnumLiteral',
                                                    value: "'0'"
                                                }
                                            }]
                                        }]
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }]
        };
        this.elaborate = function() {}
    };

    this.elaborate = function() {}
}
