# Makefile for GNU vhdl Compiler (GHDL).
#   Copyright (C) 2002 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# The makefile built from this file lives in the language subdirectory.
# It's purpose is to provide support for:
#
# 1) recursion where necessary, and only then (building .o's), and
# 2) building and debugging cc1 from the language subdirectory, and
# 3) nothing else.
#
# The parent makefile handles all other chores, with help from the
# language makefile fragment, of course.
#
# The targets for external use are:
# all, TAGS, ???mostlyclean, ???clean.

# This makefile will only work with Gnu make.
# The rules are written assuming a minimum subset of tools are available:
#
# Required:
#      MAKE:    Only Gnu make will work.
#      MV:      Must accept (at least) one, maybe wildcard, source argument,
#               a file or directory destination, and support creation/
#               modification date preservation.  Gnu mv -f works.
#      RM:      Must accept an arbitrary number of space separated file
#               arguments, or one wildcard argument. Gnu rm works.
#      RMDIR:   Must delete a directory and all its contents. Gnu rm -rf works.
#      ECHO:    Must support command line redirection. Any Unix-like
#               shell will typically provide this, otherwise a custom version
#               is trivial to write.
#      LN:      ln -s works, cp should work bu was not tested.
#      CP:      GNU cp -p works.
#      AR:      Gnu ar works.
#      MKDIR:   Gnu mkdir works.
#      CHMOD:   Gnu chmod works.
#      true:    Does nothing and returns a normal successful return code.
#      pwd:     Prints the current directory on stdout.
#      cd:      Change directory.

# Tell GNU make 3.79 not to run this directory in parallel.
# Not all of the required dependencies are present.
.NOTPARALLEL:

# Variables that exist for you to override.
# See below for how to change them for certain systems.

ALLOCA = 
# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
XCFLAGS =
CFLAGS = -g
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

X_ADAFLAGS =
T_ADAFLAGS =

ADAC = $(CC)

ECHO = echo
CHMOD = chmod
CP = cp -p
MV = mv -f
RM = rm -f
RMDIR = rm -rf
MKDIR = mkdir -p
LN = ln -s
AR = ar
# How to invoke ranlib.
RANLIB = ranlib
# Test to use to see whether ranlib exists on the system.
RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]
SHELL = /bin/sh
INSTALL_DATA = install -m 644
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
GNATBIND = gnatbind
GNATMAKE = gnatmake
ADA_CFLAGS = $(CFLAGS)
GHDL_ADAFLAGS = -Wall -gnata

objext = .o
exeext =
arext  = .a
soext  = .so
shext  =

HOST_CC=$(CC)
HOST_CFLAGS=$(ALL_CFLAGS)
HOST_CLIB=$(CLIB)
HOST_LDFLAGS=$(LDFLAGS)
HOST_CPPFLAGS=$(ALL_CPPFLAGS)
HOST_ALLOCA=$(ALLOCA)
HOST_MALLOC=$(MALLOC)
HOST_OBSTACK=$(OBSTACK)

# We don't use cross-make.  Instead we use the tools from the build tree,
# if they are available.
# program_transform_name and objdir are set by configure.in.
program_transform_name =
objdir = .

target=@target@
target_alias=@target_alias@
xmake_file=@dep_host_xmake_file@
tmake_file=@dep_tmake_file@
#version=`sed -e 's/.*\"\([^ \"]*\)[ \"].*/\1/' < $(srcdir)/version.c`
#mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)/version.c`

# Directory where sources are, from where we are.
srcdir = @srcdir@
VPATH = @srcdir@

# Top build directory, relative to here.
top_builddir = ..

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# Now figure out from those variables how to compile and link.

all.indirect: Makefile

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:

Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure
	cd ..; $(SHELL) config.status

force:

SED=sed

drvdir/default_pathes.ads: drvdir Makefile
	echo "--  DO NOT EDIT" > tmp-dpathes.ads
	echo "--  This file is created by Makefile" >> tmp-dpathes.ads
	echo "package Default_Pathes is" >> tmp-dpathes.ads
	echo "   Compiler_Gcc   : constant String :=" >> tmp-dpathes.ads
	echo "     \"$(libexecsubdir)/ghdl1$(exeext)\";" >> tmp-dpathes.ads
	echo "   Compiler_Debug : constant String :=\"\";" >> tmp-dpathes.ads
	echo "   Compiler_Mcode : constant String :=\"\";" >> tmp-dpathes.ads
	echo "   Compiler_Llvm  : constant String :=\"\";" >> tmp-dpathes.ads
	echo "   Post_Processor : constant String :=\"\";" >> tmp-dpathes.ads
	echo "   Prefix : constant String :=">> tmp-dpathes.ads
	echo "     \"$(libsubdir)/vhdl/lib/\";" >> tmp-dpathes.ads
	echo "end Default_Pathes;" >> tmp-dpathes.ads
	$(srcdir)/../../move-if-change tmp-dpathes.ads $@

../ghdl$(exeext): drvdir drvdir/default_pathes.ads force
	CURDIR=`pwd`; cd $(srcdir); SRCDIR=`pwd`; cd $$CURDIR/drvdir; \
	$(GNATMAKE) -o ../$@ -aI$$SRCDIR/ghdldrv -aI$$SRCDIR -aO.. ghdl_gcc \
	 -bargs -E -cargs $(ADA_CFLAGS) $(GHDL_ADAFLAGS) -largs $(LIBS)

drvdir:
	mkdir $@

clean: grt-clean ghdllibs-clean force
	$(RM) *.o *.ali
	$(RM) default_pathes.ads

# Additionnal rules

LIB93_DIR:=./lib/v93
LIB87_DIR:=./lib/v87
LIBSRC_DIR:=$(srcdir)/libraries
ANALYZE=../ghdl -a --GHDL1=../ghdl1 --ieee=none

$(LIB93_DIR) $(LIB87_DIR):
	$(srcdir)/../../mkinstalldirs $@

####libraries Makefile.inc
#  -*- Makefile -*- for the VHDL libraries.
#  Copyright (C) 2002, 2003, 2004, 2005 Tristan Gingold
#
#  GHDL is free software; you can redistribute it and/or modify it under
#  the terms of the GNU General Public License as published by the Free
#  Software Foundation; either version 2, or (at your option) any later
#  version.
#
#  GHDL is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with GCC; see the file COPYING.  If not, write to the Free
#  Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.

# Variable to be defined:
# LIB93_DIR
# LIB87_DIR
# REL_DIR
# LIBSRC_DIR
# ANALYZE
# LN
# CP
# VHDLLIBS_COPY_OBJS
#
# Note: the source files are analyzed in the LIBxx_DIR.  So LIBSRC_DIR must be
# relative to the target directory.

STD_SRCS := std/textio.vhdl std/textio_body.vhdl
IEEE_SRCS := ieee/std_logic_1164.vhdl ieee/std_logic_1164_body.vhdl \
  ieee/numeric_bit.vhdl ieee/numeric_bit-body.vhdl \
  ieee/numeric_std.vhdl ieee/numeric_std-body.vhdl
MATH_SRCS := ieee/math_real.vhdl ieee/math_real-body.vhdl \
  ieee/math_complex.vhdl ieee/math_complex-body.vhdl
VITAL95_BSRCS := vital95/vital_timing.vhdl vital95/vital_timing_body.vhdl \
  vital95/vital_primitives.vhdl vital95/vital_primitives_body.vhdl
VITAL2000_BSRCS := vital2000/timing_p.vhdl vital2000/timing_b.vhdl \
  vital2000/prmtvs_p.vhdl vital2000/prmtvs_b.vhdl \
  vital2000/memory_p.vhdl vital2000/memory_b.vhdl
SYNOPSYS_BSRCS := synopsys/std_logic_arith.vhdl \
  synopsys/std_logic_textio.vhdl synopsys/std_logic_unsigned.vhdl \
  synopsys/std_logic_signed.vhdl \
  synopsys/std_logic_misc.vhdl synopsys/std_logic_misc-body.vhdl 
MENTOR_BSRCS := mentor/std_logic_arith.vhdl mentor/std_logic_arith_body.vhdl

STD87_BSRCS := $(STD_SRCS:.vhdl=.v87)
STD93_BSRCS := $(STD_SRCS:.vhdl=.v93)
STD08_BSRCS := $(STD_SRCS:.vhdl=.v08)
IEEE87_BSRCS := $(IEEE_SRCS:.vhdl=.v87)
IEEE93_BSRCS := $(IEEE_SRCS:.vhdl=.v93) $(MATH_SRCS)
SYNOPSYS87_BSRCS := $(SYNOPSYS_BSRCS)
SYNOPSYS93_BSRCS := $(SYNOPSYS_BSRCS)
MENTOR93_BSRCS := $(MENTOR_BSRCS)

.PREFIXES: .vhdl .v93 .v87 .v08

%.v93: %.vhdl
	sed -e '/--V87/s/^/  --/' < $< > $@

%.v08: %.vhdl
	sed -e '/--V87/s/^/  --/' < $< > $@

%.v87: %.vhdl
	sed -e '/--V93/s/^/  --/' -e '/--START-V93/,/--END-V93/s/^/--/' \
	  < $< > $@

STD87_DIR:=$(LIB87_DIR)/std
IEEE87_DIR:=$(LIB87_DIR)/ieee
SYN87_DIR:=$(LIB87_DIR)/synopsys

STD93_DIR:=$(LIB93_DIR)/std
IEEE93_DIR:=$(LIB93_DIR)/ieee
SYN93_DIR:=$(LIB93_DIR)/synopsys
MENTOR93_DIR:=$(LIB93_DIR)/mentor

STD08_DIR:=$(LIB08_DIR)/std

ANALYZE87:=$(ANALYZE) --std=87
ANALYZE93:=$(ANALYZE) --std=93
ANALYZE08:=$(ANALYZE) --std=08

STD87_SRCS=$(addprefix $(LIBSRC_DIR)/,$(STD87_BSRCS))
STD93_SRCS=$(addprefix $(LIBSRC_DIR)/,$(STD93_BSRCS))
STD08_SRCS=$(addprefix $(LIBSRC_DIR)/,$(STD08_BSRCS))

IEEE93_SRCS=$(addprefix $(LIBSRC_DIR)/,$(IEEE93_BSRCS))
IEEE87_SRCS=$(addprefix $(LIBSRC_DIR)/,$(IEEE87_BSRCS))
SYNOPSYS_SRCS=$(addprefix $(LIBSRC_DIR)/,$(SYNOPSYS_BSRCS))
MENTOR93_SRCS=$(addprefix $(LIBSRC_DIR)/,$(MENTOR93_BSRCS))
VITAL95_SRCS=$(addprefix $(LIBSRC_DIR)/,$(VITAL95_BSRCS))
VITAL2000_SRCS=$(addprefix $(LIBSRC_DIR)/,$(VITAL2000_BSRCS))

std.v93: $(LIB93_DIR) $(STD93_SRCS) force
	$(RM) -rf $(STD93_DIR)
	mkdir $(STD93_DIR)
	prev=`pwd`; cd $(STD93_DIR); \
	for i in $(STD93_SRCS); do \
	  cmd="$(ANALYZE93) --bootstrap --work=std $(REL_DIR)/$$i"; \
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

ANALYZE_IEEE93=$(ANALYZE93) -P../std --work=ieee

ieee.v93: $(LIB93_DIR) $(IEEE93_SRCS) force
	$(RM) -rf $(IEEE93_DIR)
	mkdir $(IEEE93_DIR)
	prev=`pwd`; cd $(IEEE93_DIR); \
	for i in $(IEEE93_BSRCS) $(VITAL2000_BSRCS); do \
          cmd="$(ANALYZE_IEEE93) $(REL_DIR)/$(LIBSRC_DIR)/$$i"; \
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

synopsys.v93: $(LIB93_DIR) $(SYNOPSYS_SRCS) force
	$(RM) -rf $(SYN93_DIR)
	mkdir $(SYN93_DIR)
	prev=`pwd`; cd $(SYN93_DIR); \
	$(CP) ../ieee/ieee-obj93.cf .; \
	test x$(VHDLLIBS_COPY_OBJS) = "xno" || \
	for i in $(IEEE_SRCS) $(MATH_SRCS) $(VITAL2000_SRCS); do \
	  b=`basename $$i .vhdl`; $(LN) ../ieee/$$b.o $$b.o || exit 1; \
	done; \
	for i in $(SYNOPSYS93_BSRCS); do \
          cmd="$(ANALYZE_IEEE93) $(REL_DIR)/$(LIBSRC_DIR)/$$i"; \
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

mentor.v93: $(LIB93_DIR) $(MENTOR93_SRCS) force
	$(RM) -rf $(MENTOR93_DIR)
	mkdir $(MENTOR93_DIR)
	prev=`pwd`; cd $(MENTOR93_DIR); \
	$(CP) ../ieee/ieee-obj93.cf . ;\
	test x$(VHDLLIBS_COPY_OBJS) = "xno" || \
	for i in $(IEEE_SRCS) $(MATH_SRCS) $(VITAL2000_SRCS); do \
	  b=`basename $$i .vhdl`; $(LN) ../ieee/$$b.o $$b.o || exit 1; \
	done ; \
	for i in $(MENTOR93_BSRCS); do \
          cmd="$(ANALYZE_IEEE93) $(REL_DIR)/$(LIBSRC_DIR)/$$i";\
	  echo $$cmd; eval $$cmd || exit 1; \
	done

std.v87: $(LIB87_DIR) $(STD87_SRCS) force
	$(RM) -rf $(STD87_DIR)
	mkdir $(STD87_DIR)
	prev=`pwd`; cd $(STD87_DIR); \
	for i in $(STD87_SRCS); do \
	  cmd="$(ANALYZE87) --bootstrap --work=std $(REL_DIR)/$$i"; \
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

ANALYZE_IEEE87=$(ANALYZE87) -P../std --work=ieee

ieee.v87: $(LIB87_DIR) $(IEEE87_SRCS) force
	$(RM) -rf $(IEEE87_DIR)
	mkdir $(IEEE87_DIR)
	prev=`pwd`; cd $(IEEE87_DIR); \
	for i in $(IEEE87_BSRCS) $(VITAL95_BSRCS); do \
          cmd="$(ANALYZE_IEEE87) $(REL_DIR)/$(LIBSRC_DIR)/$$i";\
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

synopsys.v87: $(LIB87_DIR) $(SYNOPSYS_SRCS) force
	$(RM) -rf $(SYN87_DIR)
	mkdir $(SYN87_DIR)
	prev=`pwd`; cd $(SYN87_DIR); \
	$(CP) ../ieee/ieee-obj87.cf . ; \
	test x$(VHDLLIBS_COPY_OBJS) = "xno" || \
	for i in $(IEEE_SRCS) $(VITAL95_SRCS); do \
	  b=`basename $$i .vhdl`; $(LN) ../ieee/$$b.o $$b.o || exit 1; \
	done; \
	for i in $(SYNOPSYS87_BSRCS); do \
          cmd="$(ANALYZE_IEEE87) $(REL_DIR)/$(LIBSRC_DIR)/$$i";\
	  echo $$cmd; eval $$cmd || exit 1; \
	done; \
	cd $$prev

std.v08: $(LIB08_DIR) $(STD08_SRCS) force
	$(RM) -rf $(STD08_DIR)
	mkdir $(STD08_DIR)
	prev=`pwd`; cd $(STD08_DIR); \
	for i in $(STD08_SRCS); do \
	  echo $$i; \
	  $(ANALYZE08) --bootstrap --work=std $(REL_DIR)/$$i || exit 1; \
	done; \
	cd $$prev

std87_standard.o: $(GHDL1)
	$(GHDL1) --std=87 -quiet -o std_standard.s --compile-standard
	../xgcc -c -o std_standard.o std_standard.s
	$(MV) std_standard.o $@

std93_standard.o: $(GHDL1)
	$(GHDL1) --std=93 -quiet -o std_standard.s --compile-standard
	../xgcc -c -o std_standard.o std_standard.s
	$(MV) std_standard.o $@

ghdllib: std87_standard.o std93_standard.o libgrt.a

ghdllibs-clean: force
	$(RM) -rf $(LIB87_DIR) $(LIB93_DIR)

PHONY: ghdllib ghdllibs-clean

GHDL1=../ghdl1
GRTSRCDIR=$(srcdir)/grt
GRT_RANLIB=$(RANLIB)

####grt Makefile.inc
#  -*- Makefile -*- for the GHDL Run Time library.
#  Copyright (C) 2002, 2003, 2004, 2005 Tristan Gingold
#
#  GHDL is free software; you can redistribute it and/or modify it under
#  the terms of the GNU General Public License as published by the Free
#  Software Foundation; either version 2, or (at your option) any later
#  version.
#
#  GHDL is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with GCC; see the file COPYING.  If not, write to the Free
#  Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.

# Variables used:
# AR: ar command
# RM
# CC
# ADAC: the GNAT compiler
# GHDL1: the ghdl compiler
# GRT_RANLIB: the ranlib tool for the grt library.
# grt_libdir: the place to put grt.
# GRTSRCDIR: the source directory of grt.
# target: GCC target
# GRT_FLAGS: common (Ada + C + asm) compilation flags.
# GRT_ADAFLAGS: compilation flags for Ada

# Convert the target variable into a space separated list of architecture,
# manufacturer, and operating system and assign each of those to its own
# variable.

target1:=$(subst -gnu,,$(target))
targ:=$(subst -, ,$(target1))
arch:=$(word 1,$(targ))
ifeq ($(words $(targ)),2)
  osys:=$(word 2,$(targ))
else
  osys:=$(word 3,$(targ))
endif

GRT_ELF_OPTS:=-Wl,--version-script=@/grt.ver -Wl,--export-dynamic

# Set target files.
ifeq ($(filter-out i%86 linux,$(arch) $(osys)),)
  GRT_TARGET_OBJS=i386.o linux.o times.o
  GRT_EXTRA_LIB=-ldl -lm $(GRT_ELF_OPTS)
endif
ifeq ($(filter-out x86_64 linux,$(arch) $(osys)),)
  GRT_TARGET_OBJS=amd64.o linux.o times.o
  GRT_EXTRA_LIB=-ldl -lm $(GRT_ELF_OPTS)
endif
ifeq ($(filter-out i%86 freebsd%,$(arch) $(osys)),)
  GRT_TARGET_OBJS=i386.o linux.o times.o
  GRT_EXTRA_LIB=-lm $(GRT_ELF_OPTS)
  ADAC=gnatgcc
endif
ifeq ($(filter-out i%86 darwin%,$(arch) $(osys)),)
  GRT_TARGET_OBJS=i386.o linux.o times.o
  GRT_EXTRA_LIB=
endif
ifeq ($(filter-out x84_64 darwin%,$(arch) $(osys)),)
  GRT_TARGET_OBJS=amd64.o linux.o times.o
  GRT_EXTRA_LIB=
endif
ifeq ($(filter-out sparc solaris%,$(arch) $(osys)),)
  GRT_TARGET_OBJS=sparc.o linux.o times.o
  GRT_EXTRA_LIB=-ldl -lm
endif
ifeq ($(filter-out powerpc linux%,$(arch) $(osys)),)
  GRT_TARGET_OBJS=ppc.o linux.o times.o
  GRT_EXTRA_LIB=-ldl -lm $(GRT_ELF_OPTS)
endif
ifeq ($(filter-out ia64 linux,$(arch) $(osys)),)
  GRT_TARGET_OBJS=ia64.o linux.o times.o
  GRT_EXTRA_LIB=-ldl -lm $(GRT_ELF_OPTS)
endif
ifeq ($(filter-out i%86 mingw32,$(arch) $(osys)),)
  GRT_TARGET_OBJS=win32.o clock.o
endif
# Doesn't work for unknown reasons.
#ifeq ($(filter-out i%86 cygwin,$(arch) $(osys)),)
#  GRT_TARGET_OBJS=win32.o clock.o
#endif
# Fall-back: use a generic implementation based on pthreads.
ifndef GRT_TARGET_OBJS
  GRT_TARGET_OBJS=pthread.o times.o
  GRT_EXTRA_LIB=-lpthread -ldl -lm
endif

# Additionnal object files (C or asm files).
GRT_ADD_OBJS:=$(GRT_TARGET_OBJS) grt-cbinding.o grt-cvpi.o

#GRT_USE_PTHREADS=y
ifeq ($(GRT_USE_PTHREADS),y)
 GRT_CFLAGS+=-DUSE_THREADS
 GRT_ADD_OBJS+=grt-cthreads.o
 GRT_EXTRA_LIB+=-lpthread
endif

GRT_ARCH?=None

# Configuration pragmas.
GRT_PRAGMA_FLAG=-gnatec$(GRTSRCDIR)/grt.adc

# Rule to compile an Ada file.
GRT_ADACOMPILE=$(ADAC) -c $(GRT_FLAGS) $(GRT_PRAGMA_FLAG) -o $@ $<

grt-all: libgrt.a grt.lst

libgrt.a: $(GRT_ADD_OBJS) run-bind.o main.o grt-files # grt-arch.ads
	$(RM) -f $@
	$(AR) rcv $@ `sed -e "/^-/d" < grt-files` $(GRT_ADD_OBJS) \
	 run-bind.o main.o
	$(GRT_RANLIB) $@

run-bind.adb: grt-force
	gnatmake -c $(GNATFLAGS) -aI$(GRTSRCDIR) $(GRT_PRAGMA_FLAG) \
	  ghdl_main $(GRT_ADAFLAGS) -cargs $(GRT_FLAGS)
	gnatbind -Lgrt_ -o run-bind.adb -n ghdl_main.ali

#system.ads:
#	sed -e "/Configurable_Run_Time/s/False/True/" \
#	 -e "/Suppress_Standard_Library/s/False/True/" \
#	  < `$(ADAC) -print-file-name=adainclude/system.ads` > $@

run-bind.o: run-bind.adb
	$(GRT_ADACOMPILE)

main.o: $(GRTSRCDIR)/main.adb
	$(GRT_ADACOMPILE)

i386.o: $(GRTSRCDIR)/config/i386.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

chkstk.o: $(GRTSRCDIR)/config/chkstk.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

sparc.o: $(GRTSRCDIR)/config/sparc.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

ppc.o: $(GRTSRCDIR)/config/ppc.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

ia64.o: $(GRTSRCDIR)/config/ia64.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

amd64.o: $(GRTSRCDIR)/config/amd64.S
	$(CC) -c $(GRT_FLAGS) -o $@ $<

linux.o: $(GRTSRCDIR)/config/linux.c
	$(CC) -c $(GRT_FLAGS) $(GRT_CFLAGS) -o $@ $<

win32.o: $(GRTSRCDIR)/config/win32.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

win32thr.o: $(GRTSRCDIR)/config/win32thr.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

pthread.o: $(GRTSRCDIR)/config/pthread.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

times.o : $(GRTSRCDIR)/config/times.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

clock.o : $(GRTSRCDIR)/config/clock.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

grt-cbinding.o: $(GRTSRCDIR)/grt-cbinding.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

grt-cvpi.o: $(GRTSRCDIR)/grt-cvpi.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

grt-cthreads.o: $(GRTSRCDIR)/grt-cthreads.c
	$(CC) -c $(GRT_FLAGS) -o $@ $<

grt-disp-config:
	@echo "target: $(target)"
	@echo "targ: $(targ)"
	@echo "arch: $(arch)"
	@echo "osys: $(osys)"

grt-files: run-bind.adb
	sed -e "1,/-- *BEGIN/d" -e "/-- *END/,\$$d" \
	  -e "s/   --   //" < $< > $@

grt-arch.ads:
	echo "With Grt.Arch_$(GRT_ARCH);" > $@
	echo "Package Grt.Arch renames Grt.Arch_$(GRT_ARCH);" >> $@

# Remove local files (they are now in the libgrt library).
# Also, remove the -shared option, in order not to build a shared library
#  instead of an executable.
# Also remove -lgnat and its associated -L flags.  This appears to be required
#  with GNAT GPL 2005.
grt-files.in: grt-files
	sed -e "\!^./!d" -e "/-shared/d" -e "/-static/d" -e "/-lgnat/d" \
	  -e "\X-L/Xd" < $< > $@

grt.lst: grt-files.in
	echo "@/libgrt.a" > $@
ifdef GRT_EXTRA_LIB
	for i in $(GRT_EXTRA_LIB); do echo $$i >> $@; done
endif
	cat $< >> $@

grt-install: libgrt.a grt.lst
	$(INSTALL_DATA) libgrt.a $(DESTDIR)$(grt_libdir)/libgrt.a
	$(INSTALL_DATA) grt.lst $(DESTDIR)$(grt_libdir)/grt.lst

grt-force:

grt-clean: grt-force
	$(RM) *.o *.ali run-bind.adb run-bind.ads *.a std_standard.s
	$(RM) grt-files grt-files.in grt.lst

.PHONY: grt-all grt-force grt-clean grt-install

install-ghdllib: ghdllib grt.lst $(STD93_SRCS) $(STD87_SRCS) \
  $(IEEE93_SRCS) $(IEEE87_SRCS) $(SYNOPSYS_SRCS)
	$(RM) -rf $(DESTDIR)$(VHDL_LIB_DIR)
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)
# Install libgrt
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/lib
	$(INSTALL_DATA) libgrt.a $(DESTDIR)$(VHDL_LIB_DIR)/lib/libgrt.a
	$(INSTALL_DATA) grt.lst $(DESTDIR)$(VHDL_LIB_DIR)/lib/grt.lst
	$(INSTALL_DATA) $(GRTSRCDIR)/grt.ver $(DESTDIR)$(VHDL_LIB_DIR)/lib/grt.ver
# Install VHDL sources.
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/std
	for i in $(STD93_SRCS) $(STD87_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/std; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee
	for i in $(IEEE93_SRCS) $(IEEE87_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/vital95
	for i in $(VITAL95_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/vital95; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/vital2000
	for i in $(VITAL2000_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/vital2000; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/synopsys
	for i in $(SYNOPSYS_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/synopsys; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/mentor
	for i in $(MENTOR93_SRCS); do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/mentor; \
	done
# Create library dirs
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/lib/v93
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/lib/v87
# Compile in place.
	PDIR=`pwd` && cd $(DESTDIR)$(VHDL_LIB_DIR) && \
	$(MAKE) -f $$PDIR/Makefile REL_DIR=../../.. \
	 LIBSRC_DIR="src" LIB93_DIR=lib/v93 LIB87_DIR=lib/v87 \
	 ANALYZE="$$PDIR/../ghdl -a --GHDL1=$$PDIR/../ghdl1 --ieee=none" \
	 std.v93 std.v87 ieee.v93 ieee.v87 synopsys.v93 synopsys.v87 mentor.v93
# Copy std_standard (this is done after libraries, since they remove dirs).
	$(INSTALL_DATA) std87_standard.o \
	  $(DESTDIR)$(VHDL_LIB_DIR)/lib/v87/std/std_standard.o
	$(INSTALL_DATA) std93_standard.o \
	  $(DESTDIR)$(VHDL_LIB_DIR)/lib/v93/std/std_standard.o
